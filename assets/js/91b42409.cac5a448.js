"use strict";(self.webpackChunkjest_website=self.webpackChunkjest_website||[]).push([[9508],{35318:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(27378);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=o,h=u["".concat(l,".").concat(d)]||u[d]||c[d]||r;return n?a.createElement(h,i(i({ref:t},m),{},{components:n})):a.createElement(h,i({ref:t},m))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},71670:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(25773),o=(n(27378),n(35318));const r={title:"Jest 11.0",author:"Christoph Nakazawa",authorURL:"http://twitter.com/cpojer",authorFBID:0x5af311d9a1c8},i=void 0,s={permalink:"/jest/blog/2016/04/12/jest-11",editUrl:"https://github.com/facebook/jest/tree/main/website/blog/2016-04-12-jest-11.md",source:"@site/blog/2016-04-12-jest-11.md",title:"Jest 11.0",description:"Today we're announcing a switch to major revisions for Jest with Jest 11.0 being the first major release. Jest has been used by Facebook engineers and on our continuous integration systems for years and we believe Jest has been way beyond a \u201c1.0 release\u201d for a long time. This is similar to a change the React team has made.",date:"2016-04-12T00:00:00.000Z",formattedDate:"April 12, 2016",tags:[],readingTime:4.145,hasTruncateMarker:!0,authors:[{name:"Christoph Nakazawa",url:"http://twitter.com/cpojer"}],frontMatter:{title:"Jest 11.0",author:"Christoph Nakazawa",authorURL:"http://twitter.com/cpojer",authorFBID:0x5af311d9a1c8},prevItem:{title:"Jest 13.0: Flow & REPL",permalink:"/jest/blog/2016/06/22/jest-13"},nextItem:{title:"JavaScript Unit Testing Performance",permalink:"/jest/blog/2016/03/11/javascript-unit-testing-performance"}},l={authorsImageUrls:[void 0]},p=[{value:"New in Jest 11.0",id:"new-in-jest-110",level:3},{value:"Babel Integration and Simplified Setup",id:"babel-integration-and-simplified-setup",level:4},{value:"(Auto)Mocking Improvements",id:"automocking-improvements",level:4},{value:"Performance",id:"performance",level:4},{value:"Jasmine and Test Assertion Improvements",id:"jasmine-and-test-assertion-improvements",level:4},{value:"Other Changes",id:"other-changes",level:4},{value:"Contributions And Jest&#39;s future",id:"contributions-and-jests-future",level:3}],m={toc:p};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Today we're announcing a switch to major revisions for Jest with Jest 11.0 being the first major release. Jest has been used by Facebook engineers and on our continuous integration systems for years and we believe Jest has been way beyond a \u201c1.0 release\u201d for a long time. This is similar to a change ",(0,o.kt)("a",{parentName:"p",href:"http://facebook.github.io/react/blog/2016/02/19/new-versioning-scheme.html"},"the React team has made"),"."),(0,o.kt)("p",null,"If you are using Jest 0.9 or Jest 0.10 the upgrade should be seamless. All changes from the last few months were rolled into Jest 11.0."),(0,o.kt)("h3",{id:"new-in-jest-110"},"New in Jest 11.0"),(0,o.kt)("h4",{id:"babel-integration-and-simplified-setup"},"Babel Integration and Simplified Setup"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"babel-jest")," was adopted within the newly modularized Jest ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/jest/tree/main/packages"},"repository")," and it is now seamlessly integrated into Jest. If you are upgrading from an older version of Jest or are looking to adopt Jest, we recommend reading the ",(0,o.kt)("a",{parentName:"p",href:"/docs/getting-started"},"Getting Started guide"),"."),(0,o.kt)("p",null,"Previously Jest provided APIs such as ",(0,o.kt)("inlineCode",{parentName:"p"},"jest.dontMock")," which unmocks a module that is subsequently being required using the ",(0,o.kt)("inlineCode",{parentName:"p"},"require")," function. Testing code usually looked like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jest.dontMock('LikeButton');\nconst LikeButton = require('LikeButton'); // LikeButton is unmocked\n")),(0,o.kt)("p",null,"However, together with ES2015 import statements this will no longer work. Per the specification ",(0,o.kt)("inlineCode",{parentName:"p"},"import"),"s are hoisted to the top of their code block. Code written like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jest.dontMock('LikeButton');\nimport LikeButton from 'LikeButton';\n")),(0,o.kt)("p",null,"when executed, would actually be run in this order:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import LikeButton from 'LikeButton'; // This happens before the dontMock call.\njest.dontMock('LikeButton');\n")),(0,o.kt)("p",null,"The LikeButton module would therefore be mocked even though we explicitly call ",(0,o.kt)("inlineCode",{parentName:"p"},"dontMock"),"."),(0,o.kt)("p",null,"When the latest versions of Jest and babel-jest are used together, calls to the new APIs ",(0,o.kt)("inlineCode",{parentName:"p"},"jest.unmock"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"jest.mock"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"jest.disableAutomock")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"jest.enableAutomock")," are hoisted to the top of their block, before ES2015 import statements."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"jest.unmock('LikeButton');\nimport LikeButton from 'LikeButton'; // LikeButton is properly unmocked!\n")),(0,o.kt)("h4",{id:"automocking-improvements"},"(Auto)Mocking Improvements"),(0,o.kt)("p",null,"We have made numerous improvements and bug fixes to Jest's automocking feature, improved npm3 support and added new manual mocking APIs. Many people have expressed a desire use Jest with the automocking feature disabled. A global configuration option ",(0,o.kt)("a",{parentName:"p",href:"/docs/api#automock-boolean"},(0,o.kt)("inlineCode",{parentName:"a"},"automock")),", which can be set to ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),", was added."),(0,o.kt)("p",null,"We have also added two new APIs to simplify manual mocks. ",(0,o.kt)("inlineCode",{parentName:"p"},"jest.mock")," specifies a manual mock factory for a specific test:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Implement a mock for a hypothetical \"sum\" module.\njest.mock('sum', () => {\n  return (a, b) => a + b;\n});\n\nconst sum = require('sum');\nsum(1, 4); // 5\n")),(0,o.kt)("p",null,"And ",(0,o.kt)("inlineCode",{parentName:"p"},"jest.fn")," was added to make it easier to create mock functions:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Create a mock function\nconst mockFn = jest.fn(() => 42);\nmockFn(); // 42\nexpect(mockFn.calls.length).toBe(1);\n")),(0,o.kt)("h4",{id:"performance"},"Performance"),(0,o.kt)("p",null,"We recently wrote about some ",(0,o.kt)("a",{parentName:"p",href:"/blog/2016/03/11/javascript-unit-testing-performance"},"performance improvements")," we've made in Jest. Most notably, startup time has been improved and we are now in a comfortable place with regards to performance."),(0,o.kt)("h4",{id:"jasmine-and-test-assertion-improvements"},"Jasmine and Test Assertion Improvements"),(0,o.kt)("p",null,"When Jest was open sourced it shipped with Jasmine 1. Jest was designed to work with any test assertion library and optional Jasmine 2 support was added through an ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/jest/pull/330"},"external contribution")," at the end of last year. This change delivers better performance and provides a better APIs over the previous version of Jasmine. As such, we have converted all our JavaScript tests at Facebook to Jasmine 2. With Jest 11 we are making Jasmine 2 the new default. Jasmine 1 can be enabled through the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api#testrunner-string"},(0,o.kt)("inlineCode",{parentName:"a"},"testRunner"))," configuration option."),(0,o.kt)("p",null,"We have also made many updates around Jasmine. The failure messages for custom matchers provided for Jest's mock functions were improved and will now also work for Jasmine spies. Skipped tests, when using ",(0,o.kt)("inlineCode",{parentName:"p"},"fit")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"fdescribe,")," are now properly reported at the end of a test run."),(0,o.kt)("h4",{id:"other-changes"},"Other Changes"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"jest --watch")," command has been rewritten and improved. By default it now only runs tests related to changed files. If you want to run all tests on every change, you can run ",(0,o.kt)("inlineCode",{parentName:"p"},"jest --watch=all"),". The verbose logger output has also been improved and we've added more helpful warnings and error messages. We added a ",(0,o.kt)("a",{parentName:"p",href:"/docs/api#testenvironment-string"},(0,o.kt)("inlineCode",{parentName:"a"},"testEnvironment"))," configuration option to customize the test environment. For example, when building a node service, a special ",(0,o.kt)("inlineCode",{parentName:"p"},"node")," environment instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"jsdom")," can be used. Finally, the website and all documentation have been completely rewritten."),(0,o.kt)("p",null,"All changes from the past few months can be found in the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/jest/blob/main/CHANGELOG.md"},"CHANGELOG"),"."),(0,o.kt)("h3",{id:"contributions-and-jests-future"},"Contributions And Jest's future"),(0,o.kt)("p",null,"Over the last six months, Jest has received significant changes from a huge number of new contributors. I'd like to thank all the open source contributors and Facebook employees for their help in making Jest better for everyone. New contributors: Alexander Juarez, Christian Lentfort, Cristian Carlesso, Dan Abramov, Dmitrii Abramov, Evan Jacobs, James Friend, James Ide, Jeff Carpenter, Joe Lencioni, Michael Diolosa, Nik Graf, Pavel Prokopenko, Pavel Volokitin, Sebastian Mayr and ShihChi Huang."),(0,o.kt)("p",null,"With your support we are looking forward to making Jest even better in the coming months. We are currently working on improved React (Native) testing, enhanced code coverage support and are planning to open source our internal test runner that allows multiple Jest projects to be run with a single run-command."))}u.isMDXComponent=!0}}]);