"use strict";(self.webpackChunkjest_website=self.webpackChunkjest_website||[]).push([[6547],{8502:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/2022/08/25/jest-29","metadata":{"permalink":"/ro/blog/2022/08/25/jest-29","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2022-08-25-jest-29.md","source":"@site/blog/2022-08-25-jest-29.md","title":"Jest 29: Snapshot format changes","description":"Jest 29 is here, just a few short months after Jest 28. As mentioned in the Jest 28 blog post, this version contains just a couple of breaking changes, in order to make the upgrade as smooth as possible.","date":"2022-08-25T00:00:00.000Z","tags":[],"readingTime":0.74,"hasTruncateMarker":true,"authors":[{"name":"Simen Bekkhus","socials":{"github":"https://github.com/simenb","x":"https://x.com/sbekkhus"},"imageURL":"https://github.com/SimenB.png","key":"simenb","page":null}],"frontMatter":{"title":"Jest 29: Snapshot format changes","authors":"simenb"},"unlisted":false,"nextItem":{"title":"Jest joins OpenJS Foundation","permalink":"/ro/blog/2022/05/11/jest-joins-openjs"}},"content":"Jest 29 is here, just a few short months after Jest 28. As mentioned in the [Jest 28 blog post](/blog/2022/04/25/jest-28#future), this version contains just a couple of breaking changes, in order to make the upgrade as smooth as possible.\\n\\n\x3c!--truncate--\x3e\\n\\nThe only breaking changes that should be noticeable are:\\n\\n- Node versions 12 and 17 are dropped, both of which are EOL\\n- The `snapshotFormat` property is changed to:\\n\\n  ```diff\\n  + snapshotFormat: {\\n  +   escapeString: false,\\n  +   printBasicPrototype: false\\n  + }\\n  ```\\n\\n- `jest-environment-jsdom` has upgraded `jsdom` from v19 to v20\\n\\nThere are certain changes to the types exposed by Jest, but probably (hopefully!) nothing that should impede the upgrade. Please see the [upgrade guide](/docs/upgrading-to-jest29) for more details.\\n\\nThat\'s it for breaking changes! Hopefully this means the upgrade path from Jest 28 is smooth. Please see the [changelog](https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2900) for other changes.\\n\\nThanks for reading, and happy Jesting! \ud83c\udccf"},{"id":"/2022/05/11/jest-joins-openjs","metadata":{"permalink":"/ro/blog/2022/05/11/jest-joins-openjs","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2022-05-11-jest-joins-openjs.md","source":"@site/blog/2022-05-11-jest-joins-openjs.md","title":"Jest joins OpenJS Foundation","description":"Banner image for Meta Open Source and OpenJS Foundation","date":"2022-05-11T00:00:00.000Z","tags":[],"readingTime":0.445,"hasTruncateMarker":false,"authors":[{"name":"Ricky Hanlon","socials":{"github":"https://github.com/rickhanlonii","x":"https://x.com/rickhanlonii"},"imageURL":"https://github.com/rickhanlonii.png","key":"rickhanlonii","page":null}],"frontMatter":{"title":"Jest joins OpenJS Foundation","authors":"rickhanlonii"},"unlisted":false,"prevItem":{"title":"Jest 29: Snapshot format changes","permalink":"/ro/blog/2022/08/25/jest-29"},"nextItem":{"title":"Jest 28: Shedding weight and improving compatibility \ud83e\udef6","permalink":"/ro/blog/2022/04/25/jest-28"}},"content":"![Banner image for Meta Open Source and OpenJS Foundation](/img/blog/openjs.png)\\n\\nToday we\'re excited to announce that Jest is joining the OpenJS Foundation!\\n\\nThis change transfers ownership of the project from Meta to the Jest Core team via the OpenJS Foundation as an Impact Project. We\u2019re grateful to Meta for creating Jest and all of their support over the years, and we look forward to the future of Jest as a project owned by the Jest community!\\n\\nCheck out the [Meta Engineering blog](https://developers.facebook.com/blog/post/2022/05/11/meta-open-source-transfers-jest-to-openjs-foundation/) and [OpenJS Foundation blog](https://openjsf.org/blog/2022/05/11/openjs-foundation-welcomes-jest/) announcements for more info."},{"id":"/2022/04/25/jest-28","metadata":{"permalink":"/ro/blog/2022/04/25/jest-28","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2022-04-25-jest-28.md","source":"@site/blog/2022-04-25-jest-28.md","title":"Jest 28: Shedding weight and improving compatibility \ud83e\udef6","description":"Jest 28 is finally here, and it comes with some long requested features such as support for sharding a test run across multiple machines, package exports and the ability to customize the behavior of fake timers. These are just some personal highlights, and we\'ll be highlighting more in this blog post.","date":"2022-04-25T00:00:00.000Z","tags":[],"readingTime":7.335,"hasTruncateMarker":true,"authors":[{"name":"Simen Bekkhus","socials":{"github":"https://github.com/simenb","x":"https://x.com/sbekkhus"},"imageURL":"https://github.com/SimenB.png","key":"simenb","page":null}],"frontMatter":{"title":"Jest 28: Shedding weight and improving compatibility \ud83e\udef6","authors":"simenb"},"unlisted":false,"prevItem":{"title":"Jest joins OpenJS Foundation","permalink":"/ro/blog/2022/05/11/jest-joins-openjs"},"nextItem":{"title":"Jest 27: New Defaults for Jest, 2021 edition \u23e9","permalink":"/ro/blog/2021/05/25/jest-27"}},"content":"Jest 28 is finally here, and it comes with some long requested features such as support for [sharding](/docs/cli#--shard) a test run across multiple machines, [package `exports`](https://nodejs.org/api/packages.html#exports) and the ability to customize the behavior of [fake timers](/docs/jest-object#fake-timers). These are just some personal highlights, and we\'ll be highlighting more in this blog post.\\n\\nAdditionally, as announced in the [Jest 27 blog post](/blog/2021/05/25/jest-27) last year, we have removed some packages that no longer are used by default from the default installation. As a result the installation size has dropped by about 1/3.\\n\\n\x3c!--truncate--\x3e\\n\\n## Breaking changes\\n\\nThe list of breaking changes is long (and can be seen fully in the [changelog](https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2800)), but for migration purposes, we\'ve also written [a guide](/docs/28.x/upgrading-to-jest28) you can follow. Hopefully this makes the upgrade experience as frictionless as possible!\\n\\nMain breaking changes likely to impact your migration are dropped support for Node 10 and 15 (but _not_ Node 12, which will be EOL in a few days) and some renamed configuration options.\\n\\nPlease note that both of the removed modules (`jest-environment-jsdom` and `jest-jasmine2`) are still actively maintained and tested in the same way, so the only breaking change here is that you\'ll need to explicitly install them.\\n\\nThe guide should hopefully make migration trivial, but note that if you use any of the packages Jest consists of directly (such as `jest-worker` or `pretty-format`), instead of just running `jest`, then you need to go through the changelog to view any breaking changes.\\n\\n## Features\\n\\nNow let\'s talk about the new features in Jest 28, which is way more exciting! And there\'s quite a few of them, so buckle up.\\n\\n### Sharding of test run\\n\\nJest now includes a new [`--shard`](/docs/cli#--shard) CLI option, contributed by [Mario Nebl](https://github.com/marionebl). It allows you to run parts of your test across different machine, and has been one of Jest\'s oldest feature requests.\\n\\nJest\'s own test suite on CI went from about 10 minutes to 3 on Ubuntu, and on Windows from 20 minutes to 7.\\n\\n### `package.json` `exports`\\n\\nJest shipped minimal support of [`exports`](https://nodejs.org/api/packages.html#exports) in 27.3. However, it only supported the \\"main\\" entry point (`.`), and only if no `main` field was present in `package.json`. With Jest 28 we\'re excited to finally be shipping full support!\\n\\nRelated, in Jest 27, we provided either `require` or `import` condition. In Jest 28, `jest-environment-node` will now automatically provide `node` and `node-addons` conditions, while `jest-environment-jsdom` will provide the `browser` condition.\\n\\nThis has been one of the biggest compatibility issues of Jest, and hopefully this is now resolved once and for all.\\n\\n### Fake timers\\n\\nJest 26 introduced the concept of \\"modern\\" fake timers, which uses [`@sinonjs/fake-timers`](https://www.npmjs.com/package/@sinonjs/fake-timers) under the hood, and Jest 27 made it the default. In Jest 28, we are now exposing more of the underlying implementation through both configuration and runtime APIs. Huge thanks to [Tom Mrazauskas](https://github.com/mrazauskas) who contributed this feature!\\n\\nThis allows you to not mock out `process.nextTick` which improves compatibility with fake `Promise`s, or to enable `advanceTimers` which automatically advance timers.\\n\\nPlease see [the `fakeTimers` configuration](/docs/configuration#faketimers-object) for details.\\n\\n### GitHub Actions Reporter\\n\\nJest now ships with a reporter to be used on GitHub Actions, which will use annotations to print test errors inline.\\n\\n![GitHub Actions test error screenshot](/img/blog/28-gh-actions-reporter.png)\\n\\nYou can activate this reporter by passing `github-actions` in the [`reporters` configuration option](/docs/configuration#reporters-arraymodulename--modulename-options).\\n\\nHuge thanks to [Bernie Reiter](https://github.com/ockham) and other contributors for sticking by us and finally landing this feature.\\n\\n### Inline `testEnvironmentOptions`\\n\\nYou can now pass [`testEnvironmentOptions`](/docs/configuration#testenvironmentoptions-object) inline in a file, similar to how you can set test environment. This is useful if you want to e.g. change the URL in a single file.\\n\\n```js\\n/**\\n * @jest-environment jsdom\\n * @jest-environment-options {\\"url\\": \\"https://jestjs.io/\\"}\\n */\\n\\ntest(\'use jsdom and set the URL in this test file\', () => {\\n  expect(window.location.href).toBe(\'https://jestjs.io/\');\\n});\\n```\\n\\n### All Node.js globals\\n\\nIf you are using the new [`fetch`](https://nodejs.org/en/blog/announcements/v18-release-announce/#fetch-experimental) implementation in Node v18, you might have noticed that this function is not available in Jest. It has been a long-standing issue that we have to manually copy over any globals into the test globals. With Jest 28, this is no longer an issue as we now inspect the global environment Jest itself is running in, and copy over any globals that are missing in the test environment.\\n\\n### ECMAScript Modules\\n\\nNot much has changed in Jest\'s support for native ESM since Jest 27 came out. We continue to be blocked by [stabilization in Node](https://github.com/nodejs/node/issues/37648), and are hopeful this situation will improve sooner rather than later!\\n\\nHowever, we have been able to add a couple of new features in Jest 28.\\n\\n#### `data:` URLs\\n\\n[Tommaso Bossi](https://github.com/tbossi) has contributed support for [`data` URLs](https://nodejs.org/api/esm.html#data-imports), meaning you can now inline define some JavaScript to run without using `eval`.\\n\\n#### `import.meta.jest`\\n\\nWhile you have been able to access `jest` via `import {jest} from \'@jest/globals\'` in Jest, we\'ve received feedback that this is less ergonomical than the (seemingly, but not really) global `jest` variable available in CJS. So Jest 28 ships with `import.meta.jest` to allow easier access.\\n\\n### Miscellaneous\\n\\nThat\'s quite a lot of features, and are my personal highlights. However, we still have many more which I\'ll quickly go through:\\n\\n#### Asynchronous resolvers\\n\\n[Ian VanSchooten](https://github.com/IanVS) has contributed support for [asynchronous resolvers](/docs/configuration#resolver-string), which enables tools like [Vite](https://vitejs.dev/) to have better integrations with Jest.\\n\\n#### Asynchronous setup files\\n\\nIf you have some async work you want to do when using `setupFiles`, you can now export an `async function`, which Jest will call and await before loading any tests.\\n\\nNote that this feature is only available for CJS. For ESM, we recommend using top-level `await` instead.\\n\\n#### Using `globalThis`\\n\\nInternally, Jest has been using `global` to refer to the [global environment](https://developer.mozilla.org/en-US/docs/Glossary/Global_object). However, since this only exists in Node, and not browsers (`window`), this led to incompatibility when attempting to use Jest\'s modules in another environment.\\n\\nJest 28 uses [`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis) instead, which works in all environments.\\n\\n#### JSDOM 19\\n\\nWhile, as mentioned, Jest no longer ships `jest-environment-jsdom` in the default installation, it is still actively maintained. As part of that, Jest 28 has upgraded from `jsdom@16` to `jsdom@19`.\\n\\n## TypeScript\\n\\nIf you use Jest with TypeScript, either in your tests or when writing plugins such as custom runners, Jest 28 comes with extensive improvements to our types. Here\'s a non-exhaustive list of the changes in Jest 28.\\n\\n### `expect`\\n\\nWhen using `expect`\'s own types (either directly, or via `import {expect} from \'@jest/globals\'`), it\'s now finally possible to add custom matchers. See our [example](https://github.com/jestjs/jest/tree/main/examples/expect-extend) for how to do this.\\n\\n### Custom plugins\\n\\nIf you write a custom runner, test reporter, resolver or something else, we now export more types that should help you type these more correctly. This is a moving target, so if you are the author of something pluggable in Jest and the types aren\'t as useful as they could be, please file an issue!\\n\\n### `jest-runner-tsd`\\n\\n[`jest-runner-tsd`](https://github.com/jest-community/jest-runner-tsd) is a custom runner for running type tests. This is what Jest uses itself to test our types, and we hope it can also be used by others! As its name implies, it is based on [`tsd`](https://npmjs.com/package/tsd), although it under the hood uses the fork [`tsd-lite`](https://npmjs.com/package/tsd-lite).\\n\\n---\\n\\nAll of these improvements and fixes has been contributed by [Tom Mrazauskas](https://github.com/mrazauskas). Thank you so much, Tom! \ud83d\udc4f\\n\\nLastly, the minimum support version of TypeScript is now 4.3.\\n\\n## `jest-light-runner`\\n\\nThe last thing we want to highlight in this blog post, is a very cool new Jest runner, created by [Nicol\xf2 Ribaudo](https://github.com/nicolo-ribaudo), called [`jest-light-runner`](https://www.npmjs.com/package/jest-light-runner). This takes almost all of the DX Jest is known for, and speeds it way up by being a smaller abstraction on top of Node. Babel\'s tests became almost twice as fast after migrating. While there are caveats, the existence of this runner should make it even easier for people who have smaller Node modules to test to choose Jest. Thanks, Nicol\xf2!\\n\\n## Future\\n\\nWhile Jest 28 came almost a year after Jest 27, Jest 29 will be coming sooner, probably in just a few months. The current plan then is to just have one breaking change (except dropping Node versions), and that is to default [`snapshotFormat`](/docs/configuration#snapshotformat-object) to `{escapeString: false, printBasicPrototype: false}`. This makes snapshots both more readable and more copy-pasteable.\\n\\nThis will of course be possible to override if you don\'t want to change, but you can also use those options today if you don\'t want to wait!\\n\\n## Acknowledgements\\n\\nJest 28 contains contributions from more than 60 people, of which more than two thirds are first time contributors. Thank you so much to all contributors, old and new. Without you the project wouldn\'t be nearly as good as it is! I\'d particularly like to thank [Tom Mrazauskas](https://github.com/mrazauskas) and [Feng Yu](https://github.com/F3n67u) for all their contributions, from code, to issue triaging to debugging, that made Jest 28 what it is. Thank you! \ud83d\ude4f\\n\\nThanks for reading, and happy Jesting! \ud83c\udccf"},{"id":"/2021/05/25/jest-27","metadata":{"permalink":"/ro/blog/2021/05/25/jest-27","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2021-05-25-jest-27.md","source":"@site/blog/2021-05-25-jest-27.md","title":"Jest 27: New Defaults for Jest, 2021 edition \u23e9","description":"In the Jest 26 blog post about a year ago, we announced that after two major releases with few breaking changes, Jest 27 will flip some switches to set better defaults for projects that are new or can migrate smoothly. This gives us the opportunity to remove some packages from the default distribution of Jest 28 and publish them as separately installable and pluggable modules instead. Everyone on the new defaults can benefit from a smaller install size, while people needing these packages can still install them separately.","date":"2021-05-25T00:00:00.000Z","tags":[],"readingTime":6.54,"hasTruncateMarker":true,"authors":[{"name":"Tim Seckinger","socials":{"github":"https://github.com/jeysal","x":"https://x.com/_jeysal_"},"imageURL":"https://github.com/jeysal.png","key":"jeysal","page":null}],"frontMatter":{"title":"Jest 27: New Defaults for Jest, 2021 edition \u23e9","authors":"jeysal"},"unlisted":false,"prevItem":{"title":"Jest 28: Shedding weight and improving compatibility \ud83e\udef6","permalink":"/ro/blog/2022/04/25/jest-28"},"nextItem":{"title":"Jest Website Upgrade","permalink":"/ro/blog/2021/03/09/jest-website-upgrade"}},"content":"In the [Jest 26 blog post](/blog/2020/05/05/jest-26) about a year ago, we announced that after two major releases with few breaking changes, Jest 27 will flip some switches to set better defaults for projects that are new or can migrate smoothly. This gives us the opportunity to remove some packages from the default distribution of Jest 28 and publish them as separately installable and pluggable modules instead. Everyone on the new defaults can benefit from a smaller install size, while people needing these packages can still install them separately.\\n\\nWith the first major change of defaults since the [New Defaults for Jest](/blog/2016/09/01/jest-15) that came with the seminal version 15, Jest 27 is now here, to keep Jest fast, lean, and relevant in the future. We will explain those changes of defaults and other notable breaking changes in this post, but first, let\'s get into some exciting new features!\\n\\n\x3c!--truncate--\x3e\\n\\n## Feature updates\\n\\nFirstly, the interactive mode you may know from reviewing and updating failed snapshots can now also be used to **step through failed tests** one at a time. Credit goes to first-time contributor [@NullDivision](https://github.com/NullDivision) for [implementing](https://github.com/jestjs/jest/pull/10858) this feature!\\n\\n![Interactive failed test run](/img/blog/27-interactive-failures.png)\\n\\nSpeaking of snapshots, one of the more exciting features we\'ve shipped in recent years are Inline Snapshots, which [landed](https://github.com/jestjs/jest/pull/6380) in a minor release of Jest 23 almost three years ago. However, they came with the restriction that projects wanting to utilize them must be using [Prettier](https://prettier.io/) to format their code, because that\'s what Jest would use to make sure the file it writes the snapshots into remains properly formatted.  \\nAnd so for most of these years, we\'ve had a [pull request](https://github.com/jestjs/jest/pull/7792) in the pipeline to eliminate this restriction and allow using **Inline Snapshots without Prettier**. It has amassed well above a hundred comments, not even taking into account PRs split out from it and landed first, and even changed owner once after the initial submission by another first-time contributor, [@mmkal](https://github.com/mmkal) under the hilarious working title \'Uglier Inline Snapshots\'. With the stellar rise of Prettier in recent times, this improvement is now maybe less needed than back in 2018, but still, we know that feeling of getting into a project that does not use Prettier, and suddenly not being able to use inline snapshots anymore. Nevermore!\\n\\nThe main reason why it took us so long to land this was, somewhat surprisingly, an out of memory error on our build pipeline. It turns out that the dependencies we load for each test file to perform the parsing, snapshot insertion, and printing do incur a significant time and memory overhead.  \\nSo with some [tricks](https://github.com/jestjs/jest/issues/9898), we\'ve **speed up the initialization per test file** by roughly 70% compared to Jest 26. Note that you will almost certainly not see this big of a performance improvement on your project\u2014you would need a lot of test files that each run very quickly to best notice this, and the overhead when using a [JSDOM environment](/docs/configuration#testenvironment-string) dwarfs any such improvement.\\n\\nIn other news, the [native ESM support](https://github.com/jestjs/jest/issues/9430) is progressing, but some major complexities, for instance around mocking, are still ahead of us, and we continue to observe the migration to ESM as a huge ecosystem effort, where Node and a lot of crucial tools and packages all have to rely on each other to deliver an overall compelling experience.  \\nESM support [for plugging modules into Jest](https://github.com/jestjs/jest/issues/11167) is more advanced\u2014custom runners, reporters, watch plugins, and many other modules can already be loaded as ES modules.\\n\\nWe\'ve also merged [a PR](https://github.com/jestjs/jest/pull/9351) to be able to deal with test files symlinked into the test directory, a feature much wanted by users of [Bazel](https://bazel.build/).\\n\\n[Another PR](https://github.com/jestjs/jest/issues/9504) enabled [`transform`s](/docs/configuration#transform-objectstring-pathtotransformer--pathtotransformer-object) to be asynchronous, a requirement to support transpilation through tools such as [esbuild](https://esbuild.github.io/), [Snowpack](https://www.snowpack.dev/), and [Vite](https://vitejs.dev/) effectively.\\n\\n## Flipping defaults\\n\\nUp until now, if you were using Jest in its default configuration, you were\u2014perhaps unknowingly\u2014running some code forked many years ago from the test runner [Jasmine 2.0](https://jasmine.github.io/2.0/introduction) that provides test framework functions such as `describe`, `it`, and `beforeEach`. In 2017, [Aaron Abramov](https://github.com/aaronabramov) [initially wrote](https://github.com/jestjs/jest/pull/3668) a **replacement for the Jasmine code** called `jest-circus`, meant to improve error messages, maintainability, and extensibility.  \\nAfter years of large-scale use at Facebook and of course in Jest itself, as well as recent adoption in `create-react-app`, we are now confident that `jest-circus` is highly compatible with `jest-jasmine2` and should work in most environments with little to no migration work. There may be minor differences in execution order and strictness, but we expect no major upgrade difficulties other than for code relying on Jasmine-specific APIs such as `jasmine.getEnv()`. If you rely extensively on such APIs, you can opt back in to the Jasmine-based test runner by [configuring](/docs/configuration#testrunner-string) `\\"testRunner\\": \\"jest-jasmine2\\"`.\\n\\nRunning tests in a [JSDOM environment](/docs/configuration#testenvironment-string) incurs a significant performance overhead. Because this was the default behavior of Jest unless otherwise configured up until now, users who are writing Node apps, for example, may not even know they are given an expensive DOM environment that they do not even need.  \\nFor this reason, we are **changing the default test environment** from `\\"jsdom\\"` to `\\"node\\"`. If you are affected by this change because you use DOM APIs and do not have the test environment explicitly configured, you should be receiving an error when e.g. `document` is accessed, and you can configure `\\"testEnvironment\\": \\"jsdom\\"` or use [per-file environment configuration](/docs/configuration#testenvironment-string) to resolve this.  \\nFor mixed projects where some tests require a DOM environment but others don\'t, we recommend using the fast `\\"node\\"` environment by default and declaring exactly those tests that need the DOM using [docblocks](/docs/configuration#testenvironment-string).  \\nIn the next major, we plan to also eliminate `jest-jasmine2` and `jest-environment-jsdom` from the Jest dependency tree and require them to be installed explicitly, so that many users can profit from a smaller install size with less clutter that they don\'t need.\\n\\nAnother default that we are changing affects Fake Timers aka [Timer Mocks](/docs/timer-mocks). We introduced an opt-in \\"modern\\" implementation of Fake Timers in Jest 26 accessed transparently through the same API, but with much more comprehensive mocking, such as for `Date` and `queueMicrotask`.  \\nThis **modern fake timers implementation will now be the default**. If you are among the unlucky few who are affected by the subtle implementation differences too heavily to migrate, you can get back the old implementation using `jest.useFakeTimers(\\"legacy\\")` or, if you are enabling fake timers globally via [configuration](/docs/configuration#timers-string), `\\"timers\\": \\"legacy\\"`.\\n\\n## Features coming with breaking changes\\n\\nWe introduced a few more small breaking changes to help you avoid mistakes by disallowing some things that can easily happen unintentionally:\\n\\n- The same `done` test callback may not be called more than once,\\n- calling `done` and returning a Promise may not be combined,\\n- a `describe` block must not return anything,\\n\\nand we [made some TypeScript types stricter](https://github.com/jestjs/jest/pull/10512).\\n\\nModules used in the following configuration options are now transformed like the rest of your code, which may be breaking if you relied on them being loaded as-is:\\n\\n- `testEnvironment`\\n- `runner`\\n- `testRunner`\\n- `snapshotResolver`\\n\\n## Miscellaneous breaking changes\\n\\nWe removed some long-deprecated functions:\\n\\n- `jest.addMatchers` (use `expect.extend` instead)\\n- `jest.resetModuleRegistry` (use `jest.resetModules` instead)\\n- `jest.runTimersToTime` (use `jest.advanceTimersByTime` instead)\\n\\nA lot of Jest\'s packages have been migrated to use ESM-style exports (although they are still shipped as CommonJS), so if you consume e.g. `pretty-format` directly, you may need to adjust your import to a `default` import.\\n\\nWe dropped support for Node 13\u2014but Jest always supports the _Current_ and all _LTS_ [Node versions](https://nodejs.org/en/about/releases/), and Jest 27 continues to support Node 10, which only recently became unmaintained.\\n\\nAs always, the full changelog and list of breaking changes can be [viewed here](https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2700).\\n\\nFinally, we\'d like to thank the community for once again awarding Jest a sky-high satisfaction rating of 96% in the [State of JS 2020](https://2020.stateofjs.com/en-US/technologies/testing/) survey! Stay safe everyone, and we hope you continue to enjoy using Jest in the years and versions to come! \ud83c\udccf"},{"id":"/2021/03/09/jest-website-upgrade","metadata":{"permalink":"/ro/blog/2021/03/09/jest-website-upgrade","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2021-03-09-jest-website-upgrade.md","source":"@site/blog/2021-03-09-jest-website-upgrade.md","title":"Jest Website Upgrade","description":"We are excited to present the new Jest website!","date":"2021-03-09T00:00:00.000Z","tags":[],"readingTime":1.115,"hasTruncateMarker":true,"authors":[{"name":"S\xe9bastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","socials":{"github":"https://github.com/slorber","x":"https://x.com/sebastienlorber"},"imageURL":"https://github.com/slorber.png","key":"slorber","page":null}],"frontMatter":{"title":"Jest Website Upgrade","authors":"slorber"},"unlisted":false,"prevItem":{"title":"Jest 27: New Defaults for Jest, 2021 edition \u23e9","permalink":"/ro/blog/2021/05/25/jest-27"},"nextItem":{"title":"Jest 26: Tick Tock","permalink":"/ro/blog/2020/05/05/jest-26"}},"content":"We are excited to present the **new Jest website**!\\n\\nThe Jest site was upgraded from **[Docusaurus 1](https://v1.docusaurus.io/)** to **[Docusaurus 2](https://v2.docusaurus.io/)**, and is an early adopter of the [newly released Docusaurus 2 i18n support](https://v2.docusaurus.io/blog/2021/03/09/releasing-docusaurus-i18n).\\n\\nSo, what\'s new exactly?\\n\\n\x3c!--truncate--\x3e\\n\\n## What\'s new?\\n\\nHere\'s a good overview of the most visible improvements:\\n\\n- **Dark Mode**: change the color scheme through the navbar switch.\\n\\n- **Modern navigation**: we improved the navigation experience with **client-side routing** and **prefetching**.\\n\\n- **Versions dropdown**: it is now simpler to switch from one Jest version to another.\\n\\n- **Progressive-Web-App**: you can install the Jest website and browse it offline.\\n\\n- **Search**: try the new Algolia **DocSearch v3** user-experience. It is now possible to **search in blog posts**.\\n\\n- **I18n**: Jest is the first website using the **[new i18n feature of Docusaurus 2](https://v2.docusaurus.io/docs/i18n/introduction)**. It is now possible to **translate blog posts**.\\n\\n- **MDX**: embedding React components in Markdown will allow maintainers to make the **documentation more interactive**.\\n\\n## For site translators\\n\\nIf you want to help to translate the new Jest website, please use the new Crowdin project [jest-v2](https://crowdin.com/project/jest-v2) instead of the previous one.\\n\\n:::note\\n\\nIn localized pages, the edit button now links directly to Crowdin.\\n\\n:::\\n\\n## Thanks\\n\\nThanks to all the contributors that supported or reviewed this migration: [Simen](https://github.com/SimenB), [Orta](https://github.com/orta), [Joel](https://github.com/JoelMarcey), [Kristoffer](https://github.com/merceyz)...\\n\\nPlease report any problem on the [migration issue](https://github.com/jestjs/jest/pull/11021)."},{"id":"/2020/05/05/jest-26","metadata":{"permalink":"/ro/blog/2020/05/05/jest-26","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2020-05-05-jest-26.md","source":"@site/blog/2020-05-05-jest-26.md","title":"Jest 26: Tick Tock","description":"When we started rebuilding Jest five years ago our goal was to provide a batteries-included zero-configuration test runner that is approachable for beginners, extensible for almost all testing use cases and scalable to large projects. One of the instrumental releases was Jest 15 which tied everything together and provided good defaults that allowed people to run Jest often without any setup. However, this approach has a big downside as Jest installs a lot of dependencies into your projects that you may not need.","date":"2020-05-05T00:00:00.000Z","tags":[],"readingTime":6.125,"hasTruncateMarker":true,"authors":[{"name":"Christoph Nakazawa","url":"https://github.com/cpojer","socials":{"github":"https://github.com/cpojer","x":"https://x.com/cpojer"},"imageURL":"https://github.com/cpojer.png","key":"cpojer","page":null}],"frontMatter":{"title":"Jest 26: Tick Tock","authors":"cpojer"},"unlisted":false,"prevItem":{"title":"Jest Website Upgrade","permalink":"/ro/blog/2021/03/09/jest-website-upgrade"},"nextItem":{"title":"Jest 25: \ud83d\ude80 Laying foundations for the future","permalink":"/ro/blog/2020/01/21/jest-25"}},"content":"When we started rebuilding Jest five years ago our goal was to provide a batteries-included zero-configuration test runner that is approachable for beginners, extensible for almost all testing use cases and scalable to large projects. One of the instrumental releases was [Jest 15](/blog/2016/09/01/jest-15) which tied everything together and provided good defaults that allowed people to run Jest often without any setup. However, this approach has a big downside as Jest installs a lot of dependencies into your projects that you may not need.\\n\\nWe are now beginning to address this shortcoming and are working on reducing Jest\u2019s install size while keeping it approachable and extensible. We have made the following **breaking changes** in Jest 26:\\n\\n\x3c!--truncate--\x3e\\n\\n- `[expect, jest-mock, pretty-format]` Remove `ES5` build files with a new minimum of support of ES2015 (Node 8) which were only used for browser builds ([#9945](https://github.com/jestjs/jest/pull/9945))\\n\\n  > **Migration**: With this change, we are pushing the responsibility to bundle the affected packages to the users, rather than Jest providing them out of the box, since they know their target environments best. If you want it back, we\'re open to shipping these as separate packages. PRs welcome!\\n\\n- `[jest-config, jest-resolve]` Remove support for `browser` field ([#9943](https://github.com/jestjs/jest/pull/9943))\\n\\n  > **Migration**: Install `browser-resolve` module and use the following configuration:\\n\\n  ```json\\n  {\\n    \\"jest\\": {\\n      \\"resolver\\": \\"<rootDir>/resolver.js\\"\\n    }\\n  }\\n  ```\\n\\n  ```js\\n  // resolver.js\\n  const browserResolve = require(\'browser-resolve\');\\n\\n  module.exports = browserResolve.sync;\\n  ```\\n\\n- TypeScript definitions requires a minimum of TypeScript v3.8 ([#9823](https://github.com/jestjs/jest/pull/9823))\\n\\nWith the above changes Jest 26 is now 4 MiB smaller than Jest 25.5.4 (53 \u2192 49 MiB). Please keep in mind that many dependencies like Babel are likely already part of your project. Jest\'s own size was reduced by 1.2 MiB (4.3 -> 3.1 MiB).\\n\\nWhile this is a good start, it isn\u2019t enough to make Jest meaningfully leaner. We are planning on gradually reducing Jest\'s and its dependency tree size by up to 70%. Most of the changes to reduce Jest\u2019s default setup will be small breaking changes and we want to bring the community with us as much as possible. Therefore we will make the following changes in Jest 27 and Jest 28 using a [\u201cTick-Tock\\" release process](https://en.wikipedia.org/wiki/Tick%E2%80%93tock_model):\\n\\n- Jest 27 will ship with a new test runner \\"`jest-circus`\\" and the Node.js environment by default. `jest-jasmine2` and `jest-environment-jsdom` will still be bundled so users can keep using them by changing one-line each in the configuration.\\n- Jest 28 will remove `jest-jasmine2` and `jest-environment-jsdom` from the default distribution of Jest. The packages will still be actively maintained as part of the Jest project and be published separately. Users will need to install these packages to use them.\\n\\nUpon upgrading to these major releases, Jest will guide you through the necessary changes. If you\u2019d like to get ahead and migrate to the new defaults now, and your project does not require a DOM environment, you can upgrade to Jest 26 and add the following configuration options:\\n\\n```json\\n{\\n  \\"jest\\": {\\n    \\"testEnvironment\\": \\"node\\",\\n    \\"testRunner\\": \\"jest-circus/runner\\"\\n  }\\n}\\n```\\n\\nJest will continue to ship with `babel-jest` enabled by default. It currently powers a few Jest features beyond compiling modern JavaScript syntax to something understood by current versions of Node.js and browsers: It also powers Jest\'s code coverage and mocking of ES modules. Jest currently ships with experimental support for [V8 coverage](/blog/2020/01/21/jest-25#v8-code-coverage) and native support for ES Modules (more on that below!). It is not possible to mock static ES Modules per the specification without transforming the code first, so we will be encouraging patterns that work without the transformation we use Babel for today. Once V8 coverage and native ESM support stabilizes in Jest, we will also be able remove `babel-jest` as a default but we will keep maintaining it.\\n\\n## New fake timers\\n\\nWith Jest 26 we are shipping a new implementation of fake timers based on `@sinonjs/fake-timers`. We\'ve wanted to do this for years and are happy this has finally progressed far enough to support all of Jest\'s existing fake timer use cases.\\n\\nThe new implementation comes with extra features such as mocking `Date`, `queueMicrotask` and more, see [this README](https://github.com/sinonjs/fake-timers/blob/master/README.md). It works transparently using the existing timer APIs like `jest.runAllTimers()` \u2013 check out the documentation [on our website](/docs/timer-mocks).\\n\\nWe are confident this implementation is ready for prime time, however we don\'t want to force people to rewrite their tests if they depend on subtle differences between the old and new implementation. In Jest 26, this new implementation will remain _opt-in_ and can be activated by calling `jest.useFakeTimers(\'modern\')` or by passing `modern` to the `timers` option in your config if you opted all tests into fake timers previously.\\n\\nIn Jest 27 we will swap the default to the new \\"modern\\" implementation but we will keep supporting and maintaining the legacy implementation which can be used by calling `jest.useFakeTimers(\'legacy\')`. If you are unsure whether you\'ll be able to upgrade all your tests by the time Jest 27 rolls out, you can add this to your tests now to keep the old behavior.\\n\\nWe\'d like to thank [Carl-Erik Kopseng](https://github.com/fatso83), [Benjamin Gruenbaum](https://github.com/benjamingr) and other maintainers of `@sinonjs/fake-timers` for their help and patience when working with us to make this happen! _Exciting_.\\n\\n## A new way to consume Jest - `@jest/globals`\\n\\nJest has relied on globals popularized by the Jasmine testing framework and others such as `describe`, `it`, `test` and `expect`. While this is a widely used pattern, many people have expressed their preference for importing testing related functions instead. To support this use case, we added a new package `@jest/globals` that can be used to import testing functions: `import {expect, jest, test} from \'@jest/globals\';`.\\n\\nCaveats:\\n\\n- Currently the globals still exist in the environment but we will introduce a mode to disable globals in the future. Similarly, you cannot use `const jest = require(\'@jest/globals\')` as you\'ll get declaration errors because the `jest` variable is still a global for now.\\n- There is currently no way to add custom matchers to the TypeScript definitions when using globals like this.\\n- While this allows running tests without globals, it does not allow running tests without Jest\'s test runner at this time.\\n\\n## Native ESM support\\n\\nAs mentioned in the [Jest 25 blog post](/blog/2020/01/21/jest-25#ecmascript-modules-support) we have been working on native support for ECMAScript Modules. It is not stable yet but it is ready to be tested. We\'d love to hear your feedback and bug reports! For an overview of the current state you can check out [this issue](https://github.com/jestjs/jest/issues/9430), or browse all issues with that label [ES Modules](https://github.com/jestjs/jest/labels/ES%20Modules).\\n\\n## Other Breaking Changes in Jest 26\\n\\n- Dropped support for Node 8 ([#9423](https://github.com/jestjs/jest/pull/9423))\\n- `[jest-environment-jsdom]` Upgrade `jsdom` to v16 ([#9606](https://github.com/jestjs/jest/pull/9606))\\n- `[jest-runtime]` Remove long-deprecated `require.requireActual` and `require.requireMock` methods ([#9854](https://github.com/jestjs/jest/pull/9854))\\n- `[jest-haste-map]` Removed `providesModuleNodeModules` ([#8535](https://github.com/jestjs/jest/pull/8535))\\n- `[jest-circus]` Fail tests if a test takes a done callback and have return values ([#9129](https://github.com/jestjs/jest/pull/9129))\\n- `[jest-circus]` Throw a proper error if a test / hooks is defined asynchronously ([#8096](https://github.com/jestjs/jest/pull/8096))\\n\\n## Stay Safe\\n\\nWe are all currently experiencing an unprecedented time of uncertainty. If you are struggling financially, we would like to use [Jest\u2019s Open Collective fund](https://opencollective.com/jest) to help new and existing contributors. We place [bounties on some issues](https://github.com/jestjs/jest/issues?q=is%3Aissue+is%3Aopen+bounty+label%3A%22Has+Bounty%22) and are open to offering a bounty on any of our current open issues - you can mention that an issue should have a bounty in the issue or contact [@cpojer via private message on Twitter](https://twitter.com/cpojer).\\n\\nPlease stay safe."},{"id":"/2020/01/21/jest-25","metadata":{"permalink":"/ro/blog/2020/01/21/jest-25","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2020-01-21-jest-25.md","source":"@site/blog/2020-01-21-jest-25.md","title":"Jest 25: \ud83d\ude80 Laying foundations for the future","description":"Jest 25 is laying the groundwork for many major changes in the future. As such, we kept breaking changes to a minimum, but internal architecture changes may require attention during the upgrade. The main changes are an upgrade of JSDOM from v11 to v15, 10-15% faster test runs, a new diff view for outdated snapshots and dropped Node 6 support.","date":"2020-01-21T00:00:00.000Z","tags":[],"readingTime":6.995,"hasTruncateMarker":true,"authors":[{"name":"Simen Bekkhus","socials":{"github":"https://github.com/simenb","x":"https://x.com/sbekkhus"},"imageURL":"https://github.com/SimenB.png","key":"simenb","page":null}],"frontMatter":{"title":"Jest 25: \ud83d\ude80 Laying foundations for the future","authors":"simenb"},"unlisted":false,"prevItem":{"title":"Jest 26: Tick Tock","permalink":"/ro/blog/2020/05/05/jest-26"},"nextItem":{"title":"Jest 24: \ud83d\udc85 Refreshing, Polished, TypeScript-friendly","permalink":"/ro/blog/2019/01/25/jest-24-refreshing-polished-typescript-friendly"}},"content":"Jest 25 is laying the groundwork for many major changes in the future. As such, we kept breaking changes to a minimum, but internal architecture changes may require attention during the upgrade. The main changes are an upgrade of JSDOM from v11 to v15, 10-15% faster test runs, a new diff view for outdated snapshots and dropped Node 6 support.\\n\\nThere has been more than 200 commits since Jest 24.9 by more than 80 different contributors, so as always, take a look at the [changelog](https://github.com/jestjs/jest/blob/main/CHANGELOG.md) for a full list of changes.\\n\\n\x3c!--truncate--\x3e\\n\\n## Bye Node 6\\n\\nNode 6 has been EOL since April 30th 2019, and Jest 25 leaves it behind. Dropping Node 6 means we can upgrade our dependencies, the main one being JSDOM, which has been upgraded to version 15. Upgrading also means we no longer have to transpile `async-await` syntax, which results in both faster code execution and less memory consumption. As a bonus, Jest\u2019s transpiled code should be easier to debug if anyone finds themselves tumbling down that particular rabbit hole.\\n\\nEven though Node 8 has also entered EOL, Jest 25 will keep support for it to make the upgrade as easy as possible for those of us who still support Node 8. It does come with some tradeoffs though, such as JSDOM v16 having been released without Node 8 support, so you\'ll need to use [`jest-environment-jsdom-sixteen`](https://www.npmjs.com/package/jest-environment-jsdom-sixteen) if you want to use the latest version.\\n\\n## Performance improvements\\n\\nWe\u2019ve gotten reports that Jest has slowed down over the last couple of releases. Jest 25 includes upgraded Micromatch, which brings huge gains in startup time, and some bug fixes and performance tweaks which brings Jest back to the speed it was at for Jest 23. For Jest itself, like mentioned at the beginning of this post, that means a 10-15% reduction of test runtime. We\'re always looking to improve here of course, so please check how it stacks up against earlier versions and create issues if we should be better!\\n\\n## V8 Code Coverage\\n\\nJest\u2019s current code coverage instrumentation is powered by `babel-plugin-istanbul` inserting code coverage collection code before creating reports. However, this is quite slow and memory-intensive, especially for large files and code bases. Luckily, V8 has built-in code coverage, which is becoming more and more usable in Node thanks to the hard work of [Benjamin Coe](https://github.com/bcoe) and others on the V8 and Node.js teams. Jest 25 comes with experimental support for this via a new `--coverage-provider` flag. Please see its [documentation](/docs/configuration#coverageprovider-string) for caveats and how to use it.\\n\\n## Thinking fast and slow when tests fail\\n\\nUnnecessary effort to interpret the reports when tests fail hinders:\\n\\n- \u201cthinking fast\u201d to recognize patterns from your past experience\\n- \u201cthinking slow\u201d to analyze changes and decide whether they are expected progress or unexpected regressions\\n\\nJest 25 completes the second half of an effort begun in Jest 24 to improve all matchers:\\n\\n- correct description line, including `.rejects`, `.resolves`, and `.not` modifiers\\n- concise labels and consistent alignment for expected and received values\\n- inverse highlight of substring differences when expected and received are strings\\n- counts of change lines in differences to know if they are only delete or insert\\n\\nSpecial thanks to Jest maintainer [Mark Pedrotti](https://github.com/pedrottimark) for driving this effort and his continued work towards making expectation errors as good as they can be.\\n\\n## Colors of differences when snapshot tests fail\\n\\nThe most obvious change to replace confusion with confidence is the colors of change lines in differences when snapshot tests fail:\\n\\n- `- Snapshot` changes from green to **magenta**\\n- `+ Received` changes from red to **teal** foreground on cyan/aqua background\\n\\nExamples of snapshot test reports (before at left and after at right)\\n\\n1. Counts of changed lines confirm your first impression which way did the snapshot change (that is, deleted or inserted lines)\\n\\n![snapshot-insert-lines](/img/blog/25-snapshot-insert-lines.png)\\n\\n2. Background colors attract your eyes to compare adjacent changed lines\\n\\n![snapshot-change-lines](/img/blog/25-snapshot-change-lines.png)\\n\\n3. Background colors also help you see which `toThrow` tests require a decision whether or not to update the snapshot\\n\\n![snapshot-change-substrings](/img/blog/25-snapshot-change-substrings.png)\\n\\nHere are some reasons why we chose unique colors:\\n\\n- The 95% of people who have full color vision can quickly recognize which reports are from snapshot tests versus all other matchers.\\n- It solves the direct conflict between meaning of green/red in Jest tests versus red/green in code review.\\n- Unlike a reversal to red/green which suggests that update is the default decision, it suggests that differences require more careful review for possible regression in local snapshot test failures than in code review (when problems have already been fixed).\\n\\nThe difference in hue from magenta at 300\xb0 to teal/cyan/aqua at 180\xb0 gives better color vision accessibility and the light background tint for changed lines gives consistent contrast on light and dark themes.\\n\\nIf you maintain a command line tool, you might find inspiration to improve its accessibility in [#9132](https://github.com/jestjs/jest/pull/9132).\\n\\n## ECMAScript Modules support\\n\\nNode 13 has unflagged ESM support, and we have started a tiny bit working towards native support in Jest. Jest 25 includes support for `jest.config.cjs` and `jest.config.mjs` configuration files, but tests themselves cannot yet be written using ESM without something like Babel or TypeScript transforming it into CJS.\\n\\nThe APIs Jest will use are still flagged and experimental, so don\'t expect support right away. These APIs are something the [Node.js Modules team](https://github.com/nodejs/modules) is actively working on, and we\'ll be keeping an eye on it moving forward and experiment with them so we can provide feedback. You can subscribe to [this issue](https://github.com/jestjs/jest/issues/9430) to get any updates about the implementation status in Jest.\\n\\n## Other improvements and updates\\n\\n- Jest has passed [1000 unique contributors](https://github.com/jestjs/jest/graphs/contributors). This is an incredible milestone! Thank you to everybody who helps us make testing as delightful as possible.\\n- Thanks to community member [Josh Rosenstein](https://github.com/JoshRosenstein), Jest now comes with support for `BigInt` in most matchers, such as `toBeGreaterThan`. Jest will also understand bigint literals out of the box.\\n- Jest\u2019s feature `--detect-leaks` has been broken for Node 12 and newer - this has been fixed in Jest 25.\\n- As announced in the blog post for Jest 24, Jest\u2019s code base has been rewritten in TypeScript - this work was completed in Jest 24.3. So if you use any of Jest\u2019s individual parts, you should get great IDE integration. Looking forward, we really want to make Jest mocks play nicer with type systems, and we\u2019d love the community\u2019s help with this. Please chime in [here](https://github.com/jestjs/jest/issues/7832) with ideas and send PRs! We\u2019ll also be investigating moving the typings for using Jest as a test runner from DefinitelyTyped into Jest itself.\\n- The `jest-diff` package now exports functions like `diffLinesUnified` and `diffStringsUnified` which have configuration options, so other applications can format differences in a custom way. For more information and code examples, see its new `README.md` file in the Jest repository or on package repositories.\\n- Thanks to community member [Wei An Yen](https://github.com/WeiAnAn), Jest will no longer highlight passing asymmetric matchers in expectation errors. This has been a long-standing pain point with asymmetric matchers and we\'re very happy it\'s finally solved.\\n- For the second year running, Jest won the Highest Satisfaction award from [State of JS](https://2019.stateofjs.com/awards/). We are incredibly grateful for the support from the community, and hope we can build on this momentum to make 2020 even better!\\n\\n## Plans for the future\\n\\n- Jest\u2019s configuration is vast and somewhat clunky - there is often _at least_ two ways of doing the same thing, oftentimes even more. For Jest 26 we hope to condense the config down, and make it more predictable. See this [issue](https://github.com/jestjs/jest/issues/7185) for details.\\n- We also hope to be able to provide a proper programmatic API for running Jest, to make integration into IDEs and other tooling easier. Please see [this](https://github.com/jestjs/jest/issues/5048) tracking issue.\\n- There\u2019s been an open PR for adding Lolex as an implementation of Jest\u2019s fake timers since December 2017. While we\u2019re not adding it to any public APIs in Jest 25, support for it is technically included and you we\'re looking into how to expose this so people can test and experiment with it. Using it means you can mock out `Date` and other timer function Jest currently doesn\u2019t touch. Note that this should be considered experimental, and a proper API support will come in a later release. Follow [this PR](https://github.com/jestjs/jest/pull/7776) for the latest updates on the status.\\n\\nHappy Jesting! \ud83c\udccf"},{"id":"/2019/01/25/jest-24-refreshing-polished-typescript-friendly","metadata":{"permalink":"/ro/blog/2019/01/25/jest-24-refreshing-polished-typescript-friendly","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2019-01-25-jest-24-refreshing-polished-typescript-friendly.md","source":"@site/blog/2019-01-25-jest-24-refreshing-polished-typescript-friendly.md","title":"Jest 24: \ud83d\udc85 Refreshing, Polished, TypeScript-friendly","description":"Today we are happy to announce the next major release of Jest - version 24! It\'s been 4 months since the last minor release, and 8 months since Jest 23, so this upgrade is a big one, with something for everyone! Highlights include built-in support for TypeScript by upgrading the Jest internals to Babel 7, fixing some long-standing issues with missing console output and performance issues when computing large diffs, and a brand new sparkling website. \u2728","date":"2019-01-25T00:00:00.000Z","tags":[],"readingTime":8.63,"hasTruncateMarker":true,"authors":[{"name":"Simen Bekkhus","socials":{"github":"https://github.com/simenb","x":"https://x.com/sbekkhus"},"imageURL":"https://github.com/SimenB.png","key":"simenb","page":null}],"frontMatter":{"title":"Jest 24: \ud83d\udc85 Refreshing, Polished, TypeScript-friendly","authors":"simenb"},"unlisted":false,"prevItem":{"title":"Jest 25: \ud83d\ude80 Laying foundations for the future","permalink":"/ro/blog/2020/01/21/jest-25"},"nextItem":{"title":"Supporting Jest Open Source","permalink":"/ro/blog/2018/06/27/supporting-jest-open-source"}},"content":"Today we are happy to announce the next major release of Jest - version 24! It\'s been 4 months since the last minor release, and 8 months since Jest 23, so this upgrade is a big one, with something for everyone! Highlights include built-in support for TypeScript by upgrading the Jest internals to Babel 7, fixing some long-standing issues with missing console output and performance issues when computing large diffs, and a brand new sparkling website. \u2728\\n\\nFor a full list of all changes see the [changelog](https://github.com/jestjs/jest/blob/main/CHANGELOG.md).\\n\\n\x3c!--truncate--\x3e\\n\\n## New Website\\n\\n[@orta](https://twitter.com/orta) has provided a beautiful redesign of Jest\'s website, which has been implemented by community members [@montogeek](https://twitter.com/montogeek) and [@brainkim](https://github.com/brainkim).\\n\\nThe aim of the redesign was to highlight more of what makes Jest awesome, and to decouple the idea that Jest is primarily a tool for testing React apps - you can use Jest with all sorts of projects and we want to make that obvious. You can read more about the ideas behind the redesign in [this issue](https://github.com/jestjs/jest/issues/7265).\\n\\n## TypeScript support\\n\\nWe\'ve upgraded to Babel 7 internally for Jest 24, which comes with support for TypeScript projects. That means Jest can support transpiling TypeScript out of the box, as long as you configure Babel to use it with `@babel/preset-typescript`. One caveat to the default TypeScript support, similar to Flow, is that Babel will only strip out the type annotations to make your code valid JavaScript. It will _not_ typecheck your code.\\n\\nWhile Jest has supported Babel 7 since version 22 released in December 2017, it required usage of a bridge module in order to fit in with Jest\'s support of Babel 6. In Jest 24 we have migrated entirely over to Babel 7, with great help from community member [@milesj](https://github.com/milesj). This means that setup is now easier and we can take advantage of other Babel 7 features, such as config loading and automatic `modules` transpilation. Make sure to remove the `babel-core@^7.0.0-bridge.0` as it\'s not needed now.\\n\\nIf you want to run typechecks while you test, you should use [`ts-jest`](https://github.com/kulshekhar/ts-jest). You will need to configure the transformer, as Jest by default applies Babel to `.ts` (and `.tsx`) files. Alternatively, you can run `tsc` or even use a Jest runner to simultaneously transpile your TypeScript whilst running your tests! See [`jest-runner-tsc`](https://github.com/azz/jest-runner-tsc) for more information.\\n\\nSee [the docs](/docs/getting-started#using-typescript) for more details.\\n\\n:::tip\\n\\nIf you for whatever reason cannot upgrade to Babel 7, you can still use Jest 24 with `babel@6` as long as you keep `babel-jest` at version 23.\\n\\n:::\\n\\n## `test.todo`\\n\\nJest 23 had a change that made tests missing an implementation throw instead of being skipped. This change was made due to feedback that accidentally skipped tests were hard to discover and hard to track down. However, this change broke the workflow for quite a few developers who used the feature to sketch out which tests to write.\\n\\nIn Jest 24, we are addressing this issue by adding an explicit `test.todo` (inspired by the excellent AVA), which will be printed separately in the test summary. It allows you to quickly sketch out which tests you want to write and in the future, an [ESLint](https://eslint.org/) rule might even be able to warn you that you have forgotten to write out some tests.\\n\\n```js\\ntest.todo(\'invalid input should throw\');\\n\\ntest.todo(\'missing options should be normalized\');\\n```\\n\\n![test.todo](/img/blog/24-todo.png)\\n\\n## Improved Assertion Messages\\n\\nWhen tests fail, you need to make confident and correct decisions which changes are expected progress and which changes are unexpected regressions. It is especially important not to miss a few regressions hidden among much progress. Jest 24 makes reports when assertions fail more clear and concise for several matchers. Because the effort will continue in Jest 25, you might notice some temporary inconsistencies. If your tests never fail, then you won\'t get to see them - for the rest of us, it\'ll be easier to debug why something isn\'t working as expected. Thanks for the hard work by [@ittordepam](https://twitter.com/ittordepam) and other contributors from the community.\\n\\nYou can see these changes across all these PRs: [7621](https://github.com/jestjs/jest/pull/7621), [7557](https://github.com/jestjs/jest/pull/7557), [7448](https://github.com/jestjs/jest/pull/7448), [7325](https://github.com/jestjs/jest/pull/7325), [7241](https://github.com/jestjs/jest/pull/7241), [7152](https://github.com/jestjs/jest/pull/7152), [7125](https://github.com/jestjs/jest/pull/7125), [7107](https://github.com/jestjs/jest/pull/7107), [6961](https://github.com/jestjs/jest/pull/6961).\\n\\nExamples:\\n\\nFailing assertion\\n\\n![failing assertion](/img/blog/24-assertion-error.png)\\n\\nType mismatch\\n\\n![different types](/img/blog/24-different-types.png)\\n\\nMock function not called\\n\\n![mock functions](/img/blog/24-mock-function.png)\\n\\n## Fixing old pain\\n\\nWe\'ve fixed a couple of really old issues in this release.\\n\\nThe first one we\'d like to highlight is `console.log` statements going missing. Jest intercepts and collects all logs in order to give you a stack trace to them, as well as provide them to reporters so you can handle them however you want. However, this has led to an issue where they have simply been missing in certain edge cases. Luckily for Jest 24, [@spion](https://twitter.com/spion) has [stepped up](https://github.com/jestjs/jest/pull/6871) and fixed this issue. Thank you very much!\\n\\nThe second one is an issue where Jest runs out of memory if the difference in serialization of expected and received value has a huge number of insertion changes (either unexpected because of mistake in test or defect in serializer or expected because of temporary failures during test-driven development). [@ittordepam](https://twitter.com/ittordepam) has [replaced](https://github.com/jestjs/jest/pull/6961) the previous diffing algorithm with `diff-sequences` package, which should fix this issue because it uses the theoretical minimum amount of memory. It opens up possibility for word-diffs in the future, similar to what [git provides](https://git-scm.com/docs/git-diff#git-diff---word-diffltmodegt). Please see [this PR](https://github.com/jestjs/jest/pull/4619) and don\'t hesitate to reach out if you want to help make that happen!\\n\\n## Other highlights\\n\\n- We have some improvements for `globalSetup` and `globalTeardown` as well - code transformation will be applied to them similar to `setupFiles` and they are now supported as part of `projects`.\\n- You can [configure](https://github.com/jestjs/jest/pull/6143) Jest\'s snapshot location, this is mainly useful if you are building tools which use Jest in a larger build process.\\n- A quirk of Jest\'s CLI has been that while some flags and options have been camel cased (such as `runInBand`), others have not been (such as `no-cache`). In Jest 24, both are recognized, meaning you can write your CLI arguments however you want.\\n- We\'ve renamed `setupTestFrameworkScriptFile` to `setupFilesAfterEnv`, and made it into an array. We hope this will make it more obvious what the options is for. We have plans to further overhaul the configuration in the next major, see the paragraph in the section below.\\n- To reduce the amount of magic Jest performs to \u201cjust work\u2122\u201d, in this release we decided to drop automatic injection of `regenerator-runtime`, which is sometimes used in compiled async code. Including `regenerator-runtime` is not always necessary and we believe it\'s the user\'s responsibility to include it if it\'s needed. If you use `@babel/preset-env` with `targets` set to a modern Node version (e.g. Node 6+) you will not need to include it. Please see our [Using Babel docs](/docs/getting-started#using-babel) for more information.\\n- Node.js 10 came with an experimental module [called `worker_threads`](https://nodejs.org/api/worker_threads.html), which is similar to Worker threads in the browser. `jest-worker`, part of the [Jest platform](/docs/jest-platform), will be able to use `worker_threads` if available instead of `child_process`, which makes it even faster! [Benchmarks](https://github.com/jestjs/jest/pull/6676) show a 50% improvement. Due to its experimental nature, it\'s not enabled when using Jest as a test runner, but you can use it in your own projects today! We plan to enable it by default when it\'s promoted from experimental status in Node.js.\\n\\n## Breaking Changes\\n\\nWhile all breaking changes are listed in the [changelog](https://github.com/jestjs/jest/blob/main/CHANGELOG.md), there\'s a few of them that are worth highlighting:\\n\\n- We\'ve upgraded to Micromatch 3. While this might not affect every user, it is stricter in its parsing of globs than version 2, which is used in Jest 23. Please read through [this](https://github.com/micromatch/micromatch/issues/133#issuecomment-404211484) and linked issues for examples of invalid globs in case you have problems.\\n- We\'ve removed code remnants that was needed for Node 4. It was previously technically possible to run Jest 23 on Node 4 - that is no longer possible without polyfilling and transpiling.\\n- Some changes to serialization of mock functions in snapshots - make sure to double check your updated snapshots after upgrading. Related [PR](https://github.com/jestjs/jest/pull/6381).\\n- Jest no longer automatically injects `regenerator-runtime` - if you get errors concerning it, make sure to configure Babel to properly transpile `async` functions, using e.g. `@babel/preset-env`. Related [PR](https://github.com/jestjs/jest/pull/7595).\\n\\n## The future\\n\\nWe are incredibly humbled by the results in [State Of JS 2018](https://2018.stateofjs.com/awards/), where Jest won the \u201cHighest Satisfaction\u201d award. Another huge thing to happen in 2018 was in October, when Jest passed 2 million weekly downloads for the first time. Thank you.\\n\\nWe are very thankful for the trust in us shown by the community, and hope to build on it in the future. We will ensure Jest 24 and future releases will continue to build upon this incredible foundation, and continue to be an integral part of JavaScript developers\' toolkits.\\n\\nThis has been the first release where we have explored the idea of using our Open Collective funding to create bug bounties. This worked well in getting non-core developers involved in the implementation of the new landing page, and we\'re optimistic for a long running bug where Jest globals [are mismatched](https://github.com/jestjs/jest/issues/2549) from Node globals. We\'d like to do more, if you have a pet bug that\'s a good candidate for our bounty program, please let us know. In the meantime, you can find all the tickets with a bounty via [the issue label](https://github.com/jestjs/jest/labels/Has%20Bounty).\\n\\nWe have already started to make plans for the next release of Jest 25, with the biggest planned feature being an overhaul of our configuration, which is pretty hard to grok, mainly because of overlapping option and mixing globs and regular expressions. Feedback on how you want Jest\'s configuration to look is very much welcome, and can be submitted in [this issue](https://github.com/jestjs/jest/issues/7185).\\n\\nYou might also have heard that we are planning to migrate the code base from Flow to TypeScript. We are hopeful that this migration will enable even more contributors to jump in and help make 2019 even better for JavaScript testing. \ud83d\ude80 The plan is to land this in a minor release in the not too distant future. Feedback on this choice can be added to [the RFC](https://github.com/jestjs/jest/pull/7554).\\n\\nLastly, if you\'ve ever wondered about how Jest is built, [@cpojer](https://twitter.com/cpojer) has recorded a video with an architectural overview of how Jest is put together under the hood. Feel free to reach out if you have any further questions about it. The video is available on our [website](/docs/architecture).\\n\\nHappy Jesting! \ud83c\udccf"},{"id":"/2018/06/27/supporting-jest-open-source","metadata":{"permalink":"/ro/blog/2018/06/27/supporting-jest-open-source","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2018-06-27-supporting-jest-open-source.md","source":"@site/blog/2018-06-27-supporting-jest-open-source.md","title":"Supporting Jest Open Source","description":"Jest is maintained by a community of open source contributors and Facebook employees.","date":"2018-06-27T00:00:00.000Z","tags":[],"readingTime":2.74,"hasTruncateMarker":true,"authors":[{"name":"Ricky Hanlon","socials":{"github":"https://github.com/rickhanlonii","x":"https://x.com/rickhanlonii"},"imageURL":"https://github.com/rickhanlonii.png","key":"rickhanlonii","page":null}],"frontMatter":{"title":"Supporting Jest Open Source","authors":"rickhanlonii"},"unlisted":false,"prevItem":{"title":"Jest 24: \ud83d\udc85 Refreshing, Polished, TypeScript-friendly","permalink":"/ro/blog/2019/01/25/jest-24-refreshing-polished-typescript-friendly"},"nextItem":{"title":"Jest 23: \ud83d\udd25 Blazing Fast Delightful Testing","permalink":"/ro/blog/2018/05/29/jest-23-blazing-fast-delightful-testing"}},"content":"Jest is maintained by a community of open source contributors and Facebook employees.\\n\\nOur open source contributors work on behalf of the community to create new features, fix bugs, and maintain the issue backlog. Facebook employees do the same, focused on the problems specific to Facebook\'s scale, and run all proposed releases on Facebook\'s enormous test suite before publishing.\\n\\nAll of us do our part to make testing delightful.\\n\\nAt the Jest Summit we announced the Jest Open Collective. This is our way to help support the efforts of the open source Jest community. **To be absolutely clear: Facebook employees cannot benefit from the Jest Open Collective.** The collective\'s sole purpose is to support the open source side of the Jest community.\\n\\nIn this post we\'ll outline what the Jest Open Collective is, the structure, and the goals we have.\\n\\n\x3c!--truncate--\x3e\\n\\n## The Jest Open Collective\\n\\n![Banner image for Jest Open Collective](/img/blog/collective.png)\\n\\nOpen Collective is a platform to manage groups of people transparently. Jest joins projects like [webpack](https://opencollective.com/webpack), [Babel](https://opencollective.com/babel), [Mocha](https://opencollective.com/mochajs), [Preact](https://opencollective.com/preact), [Vue](https://opencollective.com/vuejs), and many more in supporting the open source community through the Open Collective platform.\\n\\n### What is the Jest Open Collective\\n\\nThe Jest Open Collective is a group of open source contributors who operate in full transparency to:\\n\\n- Receive funds from backers and sponsors\\n- Approve expenses submitted by the community\\n- Give everyone visibility on the budget\\n\\n### What is the structure of the collective\\n\\nThe Jest Open Collective is currently managed by three non-Facebook core contributors from the open source community:\\n\\n- [Michal Pierzchala](https://twitter.com/thymikee)\\n- [Simen Bekkhus](https://github.com/simenb)\\n- [Rick Hanlon](https://twitter.com/rickhanlonii)\\n\\nMichal has been an active Jest contributor since September 2016, Simen joined the core team in June 2017, and Rick joined in January. They\'re responsible for setting the budget, approving expenses, and managing admins of the collective. We have elected to keep [Christoph Nakazawa](https://twitter.com/cpojer) as an adviser.\\n\\nThere are two levels of support for the collective: Backer and Sponsor.\\n\\n#### Backers\\n\\nBackers of the collective are individuals contributing at least $2/month. We\'ll include a list of backers on the Jest homepage, README on github/yarn/npm, and Contributors page.\\n\\n#### Sponsors\\n\\nSponsors of the collective are individuals and organizations contributing at least $100/month. We\'ll place sponsor logos with a link to their site on the Jest homepage, README on github/yarn/npm, and Contributors page.\\n\\n### What is the goal of the collective\\n\\nThe goal of the collective is to support the work of open source contributors to Jest in order to make testing delightful.\\n\\nTo achieve that goal, we will use the funds to:\\n\\n- Cover speaker travel expenses\\n- Host events and meetups\\n- Print and distribute swag\\n- Develop and fund a bug bounty program (TBD)\\n\\nThis is just the beginning and we\'re committed to getting this right. If you have ideas on how else we can support the community, or feedback on the structure of the collective, please reach out to us on [twitter](https://twitter.com/jestjs_)!\\n\\n## Thank You\\n\\nFinally, thank you to everyone who contributes to the Jest community and open source in general. We are incredibly grateful that we get the opportunity to work on improving JavaScript testing together.\\n\\nThe Jest core team would also like to make a special thank you to Facebook Open Source for driving the creation of this collective."},{"id":"/2018/05/29/jest-23-blazing-fast-delightful-testing","metadata":{"permalink":"/ro/blog/2018/05/29/jest-23-blazing-fast-delightful-testing","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2018-05-29-jest-23-blazing-fast-delightful-testing.md","source":"@site/blog/2018-05-29-jest-23-blazing-fast-delightful-testing.md","title":"Jest 23: \ud83d\udd25 Blazing Fast Delightful Testing","description":"Today we are excited to announce Jest 23, our largest major release to date! Together with over 100 contributors, we\'ve shipped a ton of features and bug fixes. Thank you to everyone in the community for helping make JavaScript Testing Delightful.","date":"2018-05-29T00:00:00.000Z","tags":[],"readingTime":6.17,"hasTruncateMarker":true,"authors":[{"name":"Ricky Hanlon","socials":{"github":"https://github.com/rickhanlonii","x":"https://x.com/rickhanlonii"},"imageURL":"https://github.com/rickhanlonii.png","key":"rickhanlonii","page":null}],"frontMatter":{"title":"Jest 23: \ud83d\udd25 Blazing Fast Delightful Testing","authors":"rickhanlonii"},"unlisted":false,"prevItem":{"title":"Supporting Jest Open Source","permalink":"/ro/blog/2018/06/27/supporting-jest-open-source"},"nextItem":{"title":"Jest 22: Refinements & Custom Runners","permalink":"/ro/blog/2017/12/18/jest-22"}},"content":"Today we are excited to announce Jest 23, our largest major release to date! Together with over 100 contributors, we\'ve shipped a ton of features and bug fixes. Thank you to everyone in the community for helping make JavaScript Testing Delightful.\\n\\nWe would also like to welcome both [Babel](https://babeljs.io/) and [webpack](https://webpack.js.org/) to the Jest community! After converting from Mocha to Jest 23 Beta, webpack saw their total test suite time reduced 6x from over 13 minutes to 2 minutes 20 seconds. [#blazingmeansgood](https://twitter.com/search?q=%23blazingmeansgood)\\n\\nHere\'s are some of the Jest 23 highlights and breaking changes.\\n\\n\x3c!--truncate--\x3e\\n\\nFor a full list see the [changelog](https://github.com/jestjs/jest/blob/main/CHANGELOG.md).\\n\\n## Interactive Snapshot Mode\\n\\nWe\'ve added a new default watch menu option we\'re calling Interactive Snapshot Mode. This new mode allows you to step through each failing snapshot in each failing suite to review your failed snapshots and choose to update or skip each individually.\\n\\n![Interactive snapshot mode in action](/img/blog/23-interactive.gif)\\n\\nSee the Interactive Snapshot Mode docs [here](/docs/snapshot-testing#interactive-snapshot-mode).\\n\\n## Snapshot Property Matchers\\n\\nOften, objects you\'re snapshotting contain generated values like Dates and IDs. Jest now allows you to pass properties to the snapshot matcher which specify the structure of the data instead of the specific values. These property matchers are then verified before serializing the matcher type (instead of the value), giving you consistent snapshot results across test runs.\\n\\n![Snapshot Property Matchers](/img/blog/23-snapshot-matchers.png)\\n\\nSee the updated `toMatchSnapshot` [docs](/docs/expect#tomatchsnapshotpropertymatchers-snapshotname) or the Property Matcher [guide](/docs/snapshot-testing#property-matchers) for more information.\\n\\n## Custom Asynchronous matchers\\n\\nWe now support asynchronous matchers with `expect.extends`! Async matchers return a Promise so that you can `await` for the matcher to resolve. As an example:\\n\\n![Custom asynchronous matchers in action](/img/blog/23-async-matchers.png)\\n\\nDocs available [here](/docs/expect#expectextendmatchers).\\n\\n## Custom Asymmetric Matchers\\n\\nAsymmetric matchers are a great tool to use when you only care about asymmetric equality. For example, when the left side is expected to be an object with some subset of properties on the right, instead of an exact match. Jest provides a number of asymmetric matchers out of the box, and in this release we\'re introducing Custom Asymmetric Matchers.\\n\\n![Custom asymmetric matchers in action](/img/blog/23-asymmetric-matchers.png)\\n\\n## Jest Each\\n\\n[@mattphillipsio](https://twitter.com/mattphillipsio) has donated the `jest-each` package to Jest Core (thanks Matt!). `jest-each` is a library inspired by [`mocha-each`](https://yarnpkg.com/en/package/mocha-each) and [Spock Data Tables](http://spockframework.org/spock/docs/1.1/data_driven_testing.html#data-tables) which allows you to define a table of test cases, and then run a test for each row with the specified column values. We support both array types and template literals for all flavors of `describe` and `test`. Docs are available [here](/docs/api#testeachtable-name-fn), and for those not on Jest 23 yet, we\'re still publishing [`jest-each`](https://yarnpkg.com/en/package/jest-each) separately!\\n\\n![jest-each in action](/img/blog/23-jest-each.png)\\n\\nHuge shout out to Prettier for [fixing](https://github.com/prettier/prettier/pull/4423) the table formatting so quickly ([see Prettier 1.13](https://prettier.io/blog/2018/05/23/1.13.0.html#format-new-describeeach-table-in-jest-23-4423-by-ikatyang))!\\n\\n## New Matchers\\n\\nWe only add matchers to core if we believe they will be useful to a large amount of people in the Jest community, and leave the majority of matchers to the community (see [jest-extended](https://yarnpkg.com/en/package/jest-extended)). Some matchers make the cut into core, and Jest 23 adds:\\n\\n- nthCalledWith\\n- toReturn\\n- toReturnTimes\\n- toReturnWith\\n- lastReturnedWith\\n- nthReturnedWith\\n- toStrictEqual\\n\\n![New matchers in action](/img/blog/23-new-matchers.png)\\n\\nSee the updated expect docs [here](/docs/expect).\\n\\n## Debug Hanging Tests\\n\\nA common issue we see on the issue tracker relates to \u201cJest\u201d hanging after a test run. This is usually due to app code leaving handles open, preventing Jest from exiting. In the past, users have resorted to `--forceExit` to fix (not recommended).\\n\\nTo help debug these issues, we\'re now detecting when Jest does not exit:\\n\\n![Detecting hanging tests](/img/blog/23-hanging-before.png)\\n\\nAnd we offer a new flag `--detectOpenHandles` to help find the open handles:\\n\\n![Running detectOpenHandles](/img/blog/23-hanging-after.png)\\n\\nSee the updated CLI docs [here](/docs/cli#detectopenhandles).\\n\\n## Watch Mode Plugins\\n\\nWe have completely rewritten the watch mode system to allow adding custom plugins to watch mode. Watch Mode Plugins now make it possible to hook into Jest events and provide custom menu options in the Watch Mode Menu. All of the default Watch Mode prompts are implemented as plugins in this system, and the docs to create your own are available [here](/docs/watch-plugins).\\n\\nWith this change, we\'re also now able to bring back typeahead support as a Watch Mode Plugin via [jest-watch-typeahead](https://yarnpkg.com/en/package/jest-watch-typeahead)!\\n\\n![Typeahead plugin in action](/img/blog/23-typeahead.gif)\\n\\nSee [jest-watch-typeahead](https://github.com/jest-community/jest-watch-typeahead) for documentation and install instructions. Huge thank you to [@rogeliog](https://twitter.com/rogeliog) for the new watch mode plugin system and the jest-watch-typeahead plugin!\\n\\n## Breaking Changes\\n\\nAs with every major release, we are making a few breaking changes to make larger changes in the future possible and to push the testing experience to a new level. Here\'s a list of the biggest changes you may see:\\n\\n- **Require test descriptions and functions**: We\'re now failing tests that do not include both a function and a description.\\n- **Remove undefined props from React snapshots**: Smaller snapshots and proper React behavior.\\n- **Remove deprecations**: We removed mapCoverage since it\'s no longer needed. Additionally, we removed `jest.genMockFunction` and `jest.genMockFn` since these are the same as `jest.fn`.\\n- **Add snapshot names to failures**: We added the snapshot name (if provided) to the snapshot failure message so it\'s easier to find the snapshot that\'s failing.\\n- **Replace mock timestamps**: We replaced mock timestamps with invocationCallOrder since two or mocks may often have the same timestamp, making it impossible to test the call order.\\n- **Add results to mock snapshots**: We added mock function call results to snapshots so that both the calls and the results of the invocation are tracked.\\n\\n## Other Improvements\\n\\n- **Watch mode coverage**: Coverage is now limited to only the files tested in watch mode or when using `--onlyChanged` and `--findRelatedTests`.\\n- **Version documentation**: We added docs for each minor release back to Jest 22, and have removed all of the \u201cRequires Jest X.X+\u201d from the docs.\\n- **Better snapshot summaries**: We overhauled the Snapshot Summary output to make obsolete snapshots more informative.\\n- **Better stack traces**: We added stack traces to asynchronous errors, timeout errors, expect.assertions, and thrown non-errors. We\'re also indicating the column in the code frame!\\n- **Better React 16 support**: Adds snapshot support for `React.Fragment`, `React.forwardRef`, and `React.createContext`.\\n- **Track mock return and throw values**: Adds `mock.results` that contains the return value or thrown value for each mock call.\\n- **Blazing \ud83d\udd25**: We\'ve added a blazing badge to the README to indicate that Jest is blazing good.\\n\\n## Jest Summit\\n\\nLast week, the Jest Core Team met for the Jest Summit at Facebook London where worked on and released Jest 23, announced the Jest Open Collective, and gave a number of talks:\\n\\n- **Christoph Nakazawa** \u2013 [Intro](https://www.youtube.com/watch?v=cAKYQpTC7MA)\\n- **Aaron Abramov** \u2013 [Writing Meaningful Tests](https://youtu.be/cAKYQpTC7MA?t=440)\\n- **Rick Hanlon II** \u2013 [Blazing Fast Snapshot Testing in Jest 23](https://youtu.be/cAKYQpTC7MA?t=1881)\\n- **Simen Bekkhus** \u2013 [Jest\'s Delightful Error Messages](https://youtu.be/cAKYQpTC7MA?t=2990)\\n- **Matt Phillips** \u2013 [Level up your Jest experience with community packages](https://youtu.be/cAKYQpTC7MA?t=3852)\\n- **Michele Bertoli** \u2013 [Snapshot all the things](https://youtu.be/cAKYQpTC7MA?t=4582)\\n- **Jordan Eldredge** \u2013 [Webamp: Learn by imitating](https://youtu.be/cAKYQpTC7MA?t=5185)\\n\\nFull talk is available [here](https://www.youtube.com/watch?v=cAKYQpTC7MA).\\n\\nThe turnout was amazing, and we were able to meet a lot of the London-based community in person. Thank you to everyone who joined us and for your continued support! Stay tuned for our next post which will outline the Jest Open Collective and the plans we have for the future.\\n\\n_As always, this release couldn\'t have been possible without you, the JavaScript community. We are incredibly grateful that we get the opportunity to work on improving JavaScript testing together. If you\'d like to contribute to Jest, please don\'t hesitate to reach out to us on_ _[GitHub](https://github.com/jestjs/jest) or on_ _[Discord](https://discord.gg/j6FKKQQrW9)._"},{"id":"/2017/12/18/jest-22","metadata":{"permalink":"/ro/blog/2017/12/18/jest-22","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2017-12-18-jest-22.md","source":"@site/blog/2017-12-18-jest-22.md","title":"Jest 22: Refinements & Custom Runners","description":"Today we are announcing a new major version of Jest which refines almost all parts of Jest to provide a more solid testing foundation. Together with the Jest community we made a number of changes across the board that will help you get more out of Jest. We are also graduating the custom runners feature out of the experimental stage and added a new package, jest-worker, for parallelizing work across multiple processes. We have compiled a list of highlights below but make sure to check out the (as always) massive changelog.","date":"2017-12-18T00:00:00.000Z","tags":[],"readingTime":7.11,"hasTruncateMarker":true,"authors":[{"name":"Simen Bekkhus","socials":{"github":"https://github.com/simenb","x":"https://x.com/sbekkhus"},"imageURL":"https://github.com/SimenB.png","key":"simenb","page":null}],"frontMatter":{"title":"Jest 22: Refinements & Custom Runners","authors":"simenb"},"unlisted":false,"prevItem":{"title":"Jest 23: \ud83d\udd25 Blazing Fast Delightful Testing","permalink":"/ro/blog/2018/05/29/jest-23-blazing-fast-delightful-testing"},"nextItem":{"title":"Jest 20: \ud83d\udc96 Delightful Testing & \ud83c\udfc3\ud83c\udffd Multi-Project-Runner","permalink":"/ro/blog/2017/05/06/jest-20-delightful-testing-multi-project-runner"}},"content":"Today we are announcing a new major version of Jest which refines almost all parts of Jest to provide a more solid testing foundation. Together with the Jest community we made a number of changes across the board that will help you get more out of Jest. We are also graduating the custom runners feature out of the experimental stage and added a new package, `jest-worker`, for parallelizing work across multiple processes. We have compiled a list of highlights below but make sure to check out the (as always) [massive changelog](https://github.com/jestjs/jest/blob/main/CHANGELOG.md).\\n\\n\x3c!--truncate--\x3e\\n\\n## Good bye Node 4 & welcome JSDOM 11\\n\\nWith this release we are dropping support for Node 4, mainly because one of our main dependencies, JSDOM, ended their support. Jest now comes out of the box with JSDOM 11 which features better support for SVGs, `requestAnimationFrame`, `URL` and `URLSearchParams` built in, and [much more](https://github.com/jsdom/jsdom/blob/master/Changelog.md).\\n\\n## Custom Runners + Easy parallelization with `jest-worker`\\n\\nIn Jest 21 we introduced the concept of custom Jest runners. Since then, Rogelio, one of Jest\'s core contributors, built a number of useful runners: If you have many existing tests written using another framework but you\'d like to immediately benefit from Jest\'s features, check out [jest-runner-mocha](https://yarnpkg.com/en/package/jest-runner-mocha). If you have a large codebase that needs linting, [you may get a significant speedup](https://twitter.com/lencioni/status/907398856756695040) if you run eslint within Jest using [jest-runner-eslint](https://yarnpkg.com/en/package/jest-runner-eslint).\\n\\nTo gain more of fine-grained control over heavy tasks parallelization (e.g. transforming files or crawling the file system), we designed a new library perfectly suited for the job. We developed a modern, Promise-based module with an approachable API, called `jest-worker`, that allows you to delegate to child processes those intensive functions. As `jest-worker`, like any other Jest package, is a part of the Jest platform, you can use it however you like even without ever using Jest itself. You\'ll find more in the documentation [here](https://yarnpkg.com/en/package/jest-worker).\\n\\nTo get a better understanding of custom runners and Jest as a platform, make sure to check out Rogelio\'s talk from Reactive Conf 2017: [Jest as a Platform](https://www.youtube.com/watch?v=NtjyeojAOBs).\\n\\n## Codeframe in test failures\\n\\nIn order to more easily identify which assertion is failing your test, we\'ve added a code frame showing the context where the assertion is in order to focus on your own code. See the following example test:\\n\\n```js\\ntest(\'some test\', () => {\\n  function someFunctionWhichShouldThrow() {\\n    if (false) {\\n      throw new Error();\\n    }\\n\\n    return \'success!\';\\n  }\\n\\n  expect(someFunctionWhichShouldThrow).toThrow();\\n});\\n```\\n\\nIn Jest 21, we would display the following error:\\n\\n![failure in Jest 21](/img/blog/22-failure-21.png)\\n\\nIn Jest 22, we have added a codeframe, giving more context to the failing assertions. We have also cleaned up the stack trace to remove more clutter than ever.\\n\\n![failure in Jest 22](/img/blog/22-failure-22.png)\\n\\n## Easier testing of errors thrown in async code\\n\\nYou can now use `toThrow` and `toThrowErrorMatchingSnapshot` on promise rejections in the same way you can on synchronous errors.\\n\\n```js\\nasync function throwingFunction() {\\n  throw new Error(\'This failed\');\\n}\\n\\ntest(\'asynchronous rejection\', async () => {\\n  await expect(throwingFunction()).rejects.toThrowErrorMatchingSnapshot();\\n});\\n```\\n\\n## Asynchronous test environments\\n\\nWhen [Puppeteer](https://github.com/GoogleChrome/puppeteer/), a way of programmatically interacting with a real Chromium Browser, was announced by the Google Chrome team in August, many wanted to be able to use Jest to write their tests running them in Chrome. The community have helped us out making this possible by allowing asynchronous test environments. We are still working on making this experience as good as possible, but please see [this guide](/docs/puppeteer) for how to use Puppeteer with Jest, starting today.\\n\\n## Experimental Leak Detection\\n\\nWe added an experimental `--detectLeaks` setting to Jest that will let you know if your internal environment instance is leaked after a test execution. It will also warn you when your test suite tries to require a file after the test has finished, meaning you forgot to wait for all async operations or left something not properly cleaned. This will however not discover leaks in user land code, only in test land code; although the technology used behind it can help you (see `jest-leak-detector`). If you are reporting a bug about Jest\'s memory usage, please provide a repro where `--detectLeaks` will make the test suite fail. We [started building a better sandboxing mechanism](https://github.com/jestjs/jest/pull/4970) for Jest but it\'s not ready yet to be enabled by default. If you\'d like to help, please reach out to us on discord!\\n\\n## Watch Mode Refinements\\n\\nWhen using watch mode, there is now a way to [focus only on tests that previously failed](https://github.com/jestjs/jest/pull/4886). In this mode, Jest will not re-run previously passing tests which should help you iron out all test failures. Additionally, [we added a plugin system to watch mode](https://github.com/jestjs/jest/pull/4841). By adding modules to `watchPlugins` in your configuration you can extend the features of the watch mode.\\n\\n## Babel 7 support\\n\\nJest uses Babel under the hood to power code coverage and advanced mocking features. With Jest 22, it also supports the upcoming Babel 7. You\'ll find more in the documentation [here](/docs/getting-started#using-babel).\\n\\n## Mock function improvements\\n\\nThere has been a couple of changes to mock functions in Jest 22, making them even easier to use. Firstly, we added a [`mockName`](/docs/mock-function-api#mockfnmocknamevalue) property allowing you to name your mocks, which is useful in assertion failures. We have also made the Jest mock function serializable in `pretty-format`, meaning that you can snapshot test mocks. In Jest 21, `expect(jest.fn()).toMatchSnapshot()` would serialize to `[Function]`, in Jest 22, you might get something like this:\\n\\n```js\\ntest(\'my mocking test\', () => {\\n  const mock = jest.fn().mockName(\'myMock\');\\n\\n  mock(\'hello\', {foo: \'bar\'});\\n\\n  expect(mock).toMatchSnapshot();\\n});\\n\\n// Serializes to:\\n\\nexports[`my mocking test 1`] = `\\n[MockFunction myMock] {\\n  \\"calls\\": Array [\\n    Array [\\n      \\"hello\\",\\n      Object {\\n        \\"foo\\": \\"bar\\",\\n      },\\n    ],\\n  ],\\n}\\n`;\\n```\\n\\n## Highlights from Jest 21\\n\\nJest 21 was released back in September, and we unfortunately never got around to write a blog post. So here is a quick summary of the main changes in version 21:\\n\\n1.  **Use expect and jest-mock in the browser:** [Michael Jackson](https://github.com/mjackson) donated his excellent [`expect`](https://github.com/mjackson/expect) package to the Jest project. As part of that transition, the Jest core team, with much help from [Kenneth Skovhus](https://github.com/skovhus/), made both `jest-matchers` (renamed to `expect`) and `jest-mock` work in browsers. This means that while you cannot use Jest itself in browsers ([yet](https://github.com/jestjs/jest/issues/848)), you can use its awesome assertions and mocks for instance as replacements for Chai and Sinon running in Mocha tests. If you are migrating from earlier `expect` to the new Jest-powered `expect`, you can use [`jest-codemods`](https://github.com/skovhus/jest-codemods/) to automate the migration.\\n2.  **MIT License:** We changed Jest\'s license to MIT. _Yay!_\\n3.  **Fail test suites on async errors:** Jest used to have a bug that made it crash when errors were thrown in certain parts of async code. This was fixed by community contributors.\\n4.  **Faster startup:** With Jest 21 we fine tuned Jest\'s startup to be more than 50% faster. The large overhead of Jest when running it on a small and fast test was always an issue for us and now this shouldn\'t be a reason to hold you back from using Jest any longer.\\n\\n## Jest Community\\n\\nThe community around Jest is working hard to make the testing experience even greater. These are separate projects from the main Jest project, but we want to highlight some of our personal favorites here.\\n\\n- [jest-image-snapshot](https://github.com/americanexpress/jest-image-snapshot) \u2013 custom matcher to compare images with snapshots by American Express developers\\n- [ts-jest](https://github.com/kulshekhar/ts-jest) \u2013 all you need to successfully run Jest within TypeScript project by [@kulshekhar](https://github.com/kulshekhar/ts-jest)\\n- [jest-codemods](https://github.com/skovhus/jest-codemods/) \u2013 migrate your tests from other frameworks to Jest with ease\\n- [jest-plugins](https://github.com/negativetwelve/jest-plugins) \u2013 a new community project oriented around simplifying setting up test environment for specific tools, like React, or providing some handy utilities\\n\\nWe\'d also like to announce that recently we launched a new place for high quality Jest additions \u2013 [jest-community](https://github.com/jest-community). It\'s a new GitHub organization already featuring our favorite projects, like [vscode-jest](https://github.com/jest-community/vscode-jest), [jest-extended](https://github.com/jest-community/jest-extended), to name a few, curated by Jest maintainers and collaborators. We\'ve even migrated our [eslint-plugin-jest](https://github.com/jest-community/eslint-plugin-jest) there, and already see some great contributions, which are published independently at a faster pace.\\n\\n![Jest Community](/img/blog/22-community.png)\\n\\nCommunity projects under one organisation are also a great way for us to experiment on things like automated releases, which we\'d like to explore for Jest as well. They also enable us to share some common things between them, like the shape of the README for example (thanks to the webpack Community for the idea), making it easier to learn and use for all of us.\\n\\nIf you have something awesome to share, feel free to reach out to us! We\'d love to share your project here."},{"id":"/2017/05/06/jest-20-delightful-testing-multi-project-runner","metadata":{"permalink":"/ro/blog/2017/05/06/jest-20-delightful-testing-multi-project-runner","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2017-05-06-jest-20-delightful-testing-multi-project-runner.md","source":"@site/blog/2017-05-06-jest-20-delightful-testing-multi-project-runner.md","title":"Jest 20: \ud83d\udc96 Delightful Testing & \ud83c\udfc3\ud83c\udffd Multi-Project-Runner","description":"A few months ago we announced Jest 19 which came with major new features and was the biggest Jest release until today. Jest 20 has twice the amount of changes compared to the previous version, features a complete rewrite of the test runner, adds new testing APIs. The new release enables a new level of customization and configuration for projects all while making it effortless to upgrade. Beyond Painless JavaScript Testing, we believe Jest is now delivering a Delightful JavaScript Testing experience. Let\'s take a look at the best new features and changes in depth:","date":"2017-05-06T00:00:00.000Z","tags":[],"readingTime":6.325,"hasTruncateMarker":true,"authors":[{"name":"Christoph Nakazawa","url":"https://github.com/cpojer","socials":{"github":"https://github.com/cpojer","x":"https://x.com/cpojer"},"imageURL":"https://github.com/cpojer.png","key":"cpojer","page":null}],"frontMatter":{"title":"Jest 20: \ud83d\udc96 Delightful Testing & \ud83c\udfc3\ud83c\udffd Multi-Project-Runner","authors":"cpojer"},"unlisted":false,"prevItem":{"title":"Jest 22: Refinements & Custom Runners","permalink":"/ro/blog/2017/12/18/jest-22"},"nextItem":{"title":"\ud83c\udccf Jest 19: Immersive Watch Mode & Test Platform Improvements","permalink":"/ro/blog/2017/02/21/jest-19-immersive-watch-mode-test-platform-improvements"}},"content":"A few months ago we announced [Jest 19](/blog/2017/02/21/jest-19-immersive-watch-mode-test-platform-improvements) which came with major new features and was the biggest Jest release until today. Jest 20 has twice the amount of changes compared to the previous version, features a complete rewrite of the test runner, adds new testing APIs. The new release enables a new level of customization and configuration for projects all while making it effortless to upgrade. Beyond Painless JavaScript Testing, we believe Jest is now delivering a **Delightful JavaScript Testing experience**. Let\'s take a look at the best new features and changes in depth:\\n\\n## Multi-Project-Runner & Configuration Overhaul\\n\\nUntil now, Jest could only operate in one project at a time. This is often cumbersome if you are working on many smaller projects that each have their own setup and configuration. With Jest 20, we rewrote the test runner completely to run many projects at the same time within a single instance of Jest, for example if you are working on a React frontend and a node.js backend. Here is a video of Jest running tests for [React](https://github.com/facebook/react), [Relay](https://github.com/facebook/relay), [Yarn](https://github.com/yarnpkg/yarn) and Jest all at the same time:\\n\\n![multi-runner](/img/blog/20-multi-runner.gif)\\n\\n\x3c!--truncate--\x3e\\n\\nJest is now collapsing the usage guide after the first test run to save vertical space in the terminal.\\n\\nFurther, we completely overhauled how the configuration system works inside of Jest. You can now pass any configuration option through the CLI to overwrite the ones specified in your configuration file. Along with that, we changed Jest to look for a `jest.config.js` file by default which means you are now able to define a Jest configuration using JavaScript as well as being able to configure it through `package.json` like before. Through the addition of all these new features, you are now able to combine Jest in more powerful ways than ever before. For example, if you would like to find out which tests Jest would run given a set of changed files from a commit across multiple projects in a monorepo, you can combine cli arguments like this now:\\n\\n```bash\\n$ jest --projects projectA projectB --listTests --findRelatedTests projectA/banana.js projectB/kiwi.js\\n[\\n  \\"projectA/banana.test.js\\",\\n  \\"projectB/kiwi.test.js\\",\\n  \\"projectB/pineapple.test.js\\",\\n]\\n```\\n\\nThis is especially useful for continuous integration (CI) systems where you may want to only run a subset of tests for Pull Requests to prevent Jest from running thousands of test files on every small change.\\n\\nFinally, we are now properly mapping code coverage when using TypeScript and we are running code coverage for untested files in worker processes which yields significant speed ups for this feature.\\n\\n## New & Improved Testing APIs\\n\\nWe made a number of additions and improvements to the testing APIs which will help write more effective tests. We\'d like to point out that all of these improvements were made entirely by community members!\\n\\n- **Better async testing:** Added new async/Promise support through resolves/rejects modifiers on expect: `expect(Promise(\u2026)).resolves.toEqual(\u2026)`. [See documentation](/docs/expect#resolves).\\n- **Expect `n` assertions:** Along with the existing `expect.assertions(n)`, the new `expect.hasAssertions()` can be used to ensure a test has at least one assertion.\\n- **Lint Plugin:** A `valid-expect` rule was added to `eslint-plugin-jest` to ensure that an assertion is called after invoking `expect`. This will prevent mistakes like a stray `expect(banana);` with a missing assertion call.\\n- **Pretty-Format Plugins:** A number of new pretty-format plugins were added to Jest. We now pretty-print [Immutable.js](https://github.com/facebook/immutable-js/) data structures and HtmlElements in assertion failures and snapshots.\\n- **Custom Environment:** It is now possible to add a `@jest-environment node|jsdom` annotation to the doc-block comment of a test file to use a test environment different from the default for individual tests.\\n\\nHere is an example of all how all the new APIs together will make testing more delightful:\\n\\n```js\\n/**\\n * @jest-environment node\\n */\\n\\ntest(\'compares apples and bananas\', async () => {\\n  expect.hasAssertions(); // Ensure this test has at least one assertion.\\n\\n  await expect(\\n    Promise.resolve(Immutable.Map({apples: 1, bananas: 2})),\\n  ).resolves.toEqual(Immutable.Map({apples: 1, bananas: 3}));\\n\\n  expect(\'banana\'); // valid-expect in eslint-plugin-jest will show an error.\\n});\\n```\\n\\nThis example will print a test failure similar to this:\\n\\n![testing-apis](/img/blog/20-testing-apis.png)\\n\\n## Breaking Changes\\n\\nAs with every major release, we are making a number of breaking changes to make larger changes in the future possible and to push the testing experience to a new level. This time, we tried our best to only break APIs that we don\'t expect to affect the majority of Jest\'s users:\\n\\n- **Fork of Jasmine 2.5:** We finally decided to fork Jasmine itself and take ownership over Jest\'s own test runner. This will allow us to improve all aspects of the unit testing experience in the future but for now we are focused on incremental rewrites and reducing the API surface. If you see a test breaking as a result of a Jasmine API that is now missing, there should be an equivalent feature on the `jest` or `expect` objects. As such, we have removed many Jasmine features that aren\'t generally used in most codebases.\\n- **New Snapshots on CI:** Snapshots must always be committed along with the test and the modules they are testing. We changed Jest to not save new snapshots automatically in Continuous Integration (CI) environments or when the `--ci` flag is specified. To overwrite this behavior, which is generally not recommended, the `--updateSnapshot` flag can be used.\\n- **Babel-Polyfill:** Jest used to load `babel-polyfill` automatically when using babel-jest which resulted in memory leaks inside of Jest. In most versions of node, it is not necessary to load `babel-polyfill` so we removed this auto-inclusion and instead changed Jest to only include `regenerator-runtime` by default, which is commonly used to support async/await in older versions of Node.js. If you need `babel-polyfill`, you can manually require it in your setup files.\\n\\n## Other Improvements\\n\\n- **Documentation:** Documentation is critical to share best practices and teach everyone how to write effective tests which will lead to better software. Over the last few weeks we have also expanded Jest\'s documentation to include a Snapshot Testing FAQ, a guide with information about how to use Jest with common JavaScript libraries as well as we documented the new features mentioned above.\\n- **Translations:** We are now asking for your help to [translate the Jest documentation](https://crowdin.com/project/jest-v2) to make it easier for people to learn how to use Jest.\\n- **Custom Reporters:** Jest now supports custom test reporters through the `reporters` configuration option. You can finally customize the output of Jest as well as integrate it with other tools by generating reports in formats such as XML. [See documentation](/docs/configuration#reporters-array-modulename-modulename-options).\\n- **Codebase Health:** It was only possible iterate so quickly in Jest because we spent a significant amount of time on the health of the codebase. We were one of the early adopters of [prettier](https://github.com/prettier/prettier), we notably increased flow coverage, forked Jasmine to improve our test runner library and we rewrote and refactored significant portions of Jest itself to set up Jest for success in the future.\\n- **Bugfixes:** As always, we made plenty of bugfixes in Jest. The full changelog can be found in the [Jest repository](https://github.com/jestjs/jest/blob/main/CHANGELOG.md#jest-2000).\\n\\n## Talks about Jest\\n\\nRecently the Jest core team and other contributors started to talk more about Jest and the experience of working on Jest at conferences:\\n\\n- Rogelio Guzman did a talk about [Jest Snapshots and Beyond](https://www.youtube.com/watch?time_continue=416&v=HAuXJVI_bUs) at React Conf.\\n- I spoke about [Building High-Quality JavaScript Tools](https://developers.facebook.com/videos/f8-2017/building-high-quality-javascript-tools/) at Facebook\'s F8 conference.\\n\\n_As always, this release couldn\'t have been possible without you, the JavaScript community. We are incredibly grateful that we get the opportunity to work on improving JavaScript testing together. If you\'d like to contribute to Jest, please don\'t hesitate to reach out to us on [GitHub](https://github.com/jestjs/jest) or on [Discord](https://discord.gg/j6FKKQQrW9)._"},{"id":"/2017/02/21/jest-19-immersive-watch-mode-test-platform-improvements","metadata":{"permalink":"/ro/blog/2017/02/21/jest-19-immersive-watch-mode-test-platform-improvements","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2017-02-21-jest-19-immersive-watch-mode-test-platform-improvements.md","source":"@site/blog/2017-02-21-jest-19-immersive-watch-mode-test-platform-improvements.md","title":"\ud83c\udccf Jest 19: Immersive Watch Mode & Test Platform Improvements","description":"Today we are pleased to ship version 19 of the Jest testing platform. It\'s the biggest Jest release we have shipped so far and we are quite excited to show you what we\'ve built over the last two months:","date":"2017-02-21T00:00:00.000Z","tags":[],"readingTime":6.86,"hasTruncateMarker":true,"authors":[{"name":"Rogelio Guzman","socials":{"github":"https://github.com/rogeliog","x":"https://x.com/rogeliog"},"imageURL":"https://github.com/rogeliog.png","key":"rogeliog","page":null}],"frontMatter":{"title":"\ud83c\udccf Jest 19: Immersive Watch Mode & Test Platform Improvements","authors":"rogeliog"},"unlisted":false,"prevItem":{"title":"Jest 20: \ud83d\udc96 Delightful Testing & \ud83c\udfc3\ud83c\udffd Multi-Project-Runner","permalink":"/ro/blog/2017/05/06/jest-20-delightful-testing-multi-project-runner"},"nextItem":{"title":"A Great Developer Experience","permalink":"/ro/blog/2017/01/30/a-great-developer-experience"}},"content":"Today we are pleased to ship version 19 of the Jest testing platform. It\'s the biggest Jest release we have shipped so far and we are quite excited to show you what we\'ve built over the last two months:\\n\\n## Immersive Watch Mode\\n\\nWe [completely rewrote the watch mode](https://github.com/jestjs/jest/pull/2362) to make it instant and more extensible. As a result, the experience of using it really is immersive: tests re-run instantly after a file change and we made it easy to select the right tests.\\n\\n\x3c!--truncate--\x3e\\n\\n## Snapshot Updates\\n\\nWe made a couple of changes to the snapshot format. We don\'t make changes like this often and only consider them if they actually improve how snapshots work. As well as introducing a snapshot version number we accumulated a number of changes we wanted to make to the format for a while:\\n\\n- We dropped the \u201ctest\u201d prefix in snapshot names from top level `test` or `it` calls.\\n- We improved the printing of React elements to cause less changes when the last prop in an element changes.\\n- We improved the character escaping mechanism to be more bulletproof.\\n\\nBefore:\\n\\n```js\\nexports[`test snap 1`] = `\\n<header>\\n  <h1>\\n    Jest \\\\\\"19\\\\\\"\\n  </h1>\\n  <Subtitle\\n    name=\\"Painless JavaScript Testing\\" />\\n</header>\\n`;\\n```\\n\\nAfter (no \u201ctest\u201d prefix, better JSX rendering, version header):\\n\\n```js\\n// Jest Snapshot v1, https://goo.gl/fbAQLP\\n\\nexports[`snap 1`] = `\\n<header>\\n  <h1>\\n    Jest \\"19\\"\\n  </h1>\\n  <Subtitle\\n    name=\\"Painless JavaScript Testing\\"\\n  />\\n</header>\\n`;\\n```\\n\\nWe decided it\'s a good time to introduce versioned snapshots to ensure all developers are using a compatible version of Jest. Here\'s how we warn you about the need to update your snapshot:\\n\\n![snapshot-version](/img/blog/19-snapshot-version.png)\\n\\nPlease make sure you revert any local changes before updating to make the transition smooth and to ensure you aren\'t including any unwanted changes from failing tests in your new snapshots.\\n\\n## Improved printing of skipped tests\\n\\nSkipped tests are now printed as a single line instead of showing every individual one when testing in verbose mode or a single suite. Hopefully it will let you focus on currently important tests. It also occupies far less space!\\n\\n![skipped-tests](/img/blog/19-skipped-tests.png)\\n\\n## New CLI arguments\\n\\nJest 19 ships with two new coverage-related arguments which you can run from CLI:\\n\\n- `--collectCoverageFrom`\\n- `--coverageDirectory`\\n\\nWe now also error on invalid CLI arguments instead of ignoring them. But we\'ve got your back with helpful error message like the one below, e.g. when you try running `jest --watc`:\\n\\n![cli-error](/img/blog/19-cli-error.png)\\n\\n## `expect` Improvements\\n\\n- [`expect.addSnapshotSerializer`](/docs/expect#expectaddsnapshotserializerserializer)\\n- [`expect.stringContaining`](/docs/expect#expectstringcontainingstring)\\n- [`jest.spyOn`](/docs/jest-object#jestspyonobject-methodname)\\n\\nWe\'re close to almost full feature parity with the `expect` npm package. [Michael Jackson](https://twitter.com/mjackson), the author of the package, agreed to [donate](https://github.com/jestjs/jest/issues/1679) it to the Jest project, which means that `jest-matchers` will be renamed to `expect`. Since our version of `expect` is not intended to be fully compatible, [Christopher Chedeau](https://twitter.com/Vjeux) is working on a codemod to make the transition painless. Christopher also worked on a number of improvements to `jest-matchers` which enables it to be used outside of Jest and even [works inside browsers](https://github.com/jestjs/jest/pull/2795).\\n\\n## [eslint-plugin-jest](https://github.com/jest-community/eslint-plugin-jest) \u2013 our very own ESLint plugin\\n\\nThanks to [Jonathan Kim](https://twitter.com/jonnykim) Jest finally has its own official ESLint plugin. It exposes three rules:\\n\\n- [no-disabled-tests](https://github.com/jest-community/eslint-plugin-jest/blob/main/docs/rules/no-disabled-tests.md) - this rule prevents you from accidentally committing disabled tests.\\n- [no-focused-tests](https://github.com/jest-community/eslint-plugin-jest/blob/main/docs/rules/no-focused-tests.md) - this rule prevents you from committing focused tests which would disable all other tests in the same suite.\\n- [no-identical-title](https://github.com/jest-community/eslint-plugin-jest/blob/main/docs/rules/no-identical-title.md) - disallows identical titles in test names.\\n\\nYou can install it using `npm install --save-dev eslint-plugin-jest` or `yarn add --dev eslint eslint-plugin-jest` and it can be enabled by adding `{\\"plugins\\": [\\"jest\\"]}` to your eslint configuration.\\n\\n## New public package: [jest-validate](https://github.com/jestjs/jest/tree/main/packages/jest-validate)\\n\\nWhile we refactored the validation and normalization code for Jest\'s configuration, we were so happy with the new error messaging that we extracted it to its own module to share it with everyone. With Jest 19 we welcome `jest-validate` to our self-sustained packages family.\\n\\n`jest-validate` is a generic configuration validation tool that helps you with warnings, errors and deprecation messages in your JavaScript tool. It\'s also capable of showing users friendly examples of correct configuration and it comes with a simple but powerful API. We hope it\'ll make a good addition to your projects!\\n\\n![validate](/img/blog/19-validate.png)\\n\\nWe\'re happy to announce that `jest-validate` is validating config options of [prettier](https://github.com/jlongster/prettier) since [v0.12](https://github.com/jlongster/prettier/blob/main/CHANGELOG.md#0120). Feel free to add it to your project, try it, send us feedback and improve it by making pull requests on GitHub.\\n\\n## Improved asymmetric matchers\\n\\nWe moved the asymmetric matchers implementation from Jasmine into Jest, which enabled us to further improve the user experience around them. As a result, asymmetric matchers are now pretty-printed nicely, we added the new [`expect.stringContaining()`](/docs/expect#expectstringcontainingstring) matcher and we also paired them with [`expect.toMatchObject()`](/docs/expect#tomatchobjectobject) so you can use the best of both:\\n\\n![asymmetric-matchers](/img/blog/19-asymmetric-matchers.png)\\n\\n## Better manual mocks\\n\\nWith the latest release, manual mocks now finally work with nested folders. For example `__mocks__/react-native/Libraries/Text/Text.js` will now work as expected and mock the correct module. We also fixed issues with virtual mocks and transitive dependencies and improved `moduleNameMapper` to not overwrite mocks when many patterns map to the same file.\\n\\n## Breaking Changes\\n\\nAs a part of our cleanups and fixes we removed the `mocksPattern` configuration option which was never officially supported. We also renamed the `testPathDirs` configuration option to `roots` which better explains what the option can be used for. The default configuration for `roots` is `[\\"<rootDir>\\"]` and can be customized to include any number of directories. The rootDir configuration option has always been used mostly as a token for other configuration options and this rename should make configuring Jest clearer.\\n\\n## Revamped documentation\\n\\nAs you may have already seen, [Hector Ramos](https://twitter.com/hectorramos) and [Kevin Lacker](https://twitter.com/lacker) gave Jest\'s documentation a fresh new look. We changed the way we organize the website and it now features Docs and API as separate pages:\\n\\n- Under [Docs](/docs/getting-started#content) you can find an introduction to Jest, including [Getting Started](/docs/getting-started#content) or [Testing Asynchronous Code](/docs/asynchronous#content) and handy guides like [Snapshot Testing](/docs/snapshot-testing#content), [Testing React Native App](/docs/tutorial-react-native#content), [Using with webpack](/docs/webpack#content) or [Migrating to Jest](/docs/migration-guide#content) and many more!\\n- The [API](/docs/api) section on the other hand lists all available methods exposed by Jest: the `expect` and `jest` objects, mock functions, globals, along with configuration options from _package.json_ and from the CLI.\\n\\nThe homepage was completely redesigned to be more descriptive of what Jest is about: \u201c_Zero configuration testing platform_\u201d. We also made sure it reads better on mobile devices. And for those using RSS \u2013 we finally provide a [feed for our blog](https://jestjs.io/blog/feed.xml).\\n\\n## Community Updates\\n\\n- We really loved this talk: \u201c[Introduction to Jest](https://www.youtube.com/watch?v=tvy0bSgwtTo)\u201c by Vas Boroviak.\\n- Follow [@jestjs\\\\_ on Twitter](http://twitter.com/jestjs_).\\n- The Jest Core team syncs once a week to discuss current and future issues. If you\'d like to work on Jest, let us know, submit a few pull requests and join our weekly team meetings.\\n- The awesome engineers at Artsy wrote [about Jest as part of their 2017 frontend stack](http://artsy.github.io/blog/2017/02/05/Front-end-JavaScript-at-Artsy-2017/).\\n- Stephen Scott wrote a detailed article about [testing React components](https://medium.freecodecamp.com/the-right-way-to-test-react-components-548a4736ab22) in which he weighs the pros and cons of different approaches.\\n- [Using Jest with vue.js](https://medium.com/@kentaromiura_the_js_guy/jest-for-all-episode-1-vue-js-d616bccbe186#.r8ryxlw98) got a lot easier after reading Cristian Carlesso\'s blog post.\\n- [Michele Bertoli wrote a book about React Design Patterns and Best Practices](https://twitter.com/cpojer/status/825004258219130880) which features an entire section about Jest.\\n- Improved `--notify` command that shows an operating system notification which [can now also re-run tests from the notification](https://github.com/jestjs/jest/pull/2727). This is actually a Jest feature and we are just checking if you are still reading this blog post.\\n- Jest is now part of [react-boilerplate](https://twitter.com/mxstbr/status/820326656439177217).\\n- Read about the [hidden powers of Jest\'s matchers](https://medium.com/@boriscoder/the-hidden-power-of-jest-matchers-f3d86d8101b0#.pn10z1pzx).\\n\\nFinally, we are happy to announce that the [ava](https://github.com/avajs/ava) test runner has adopted parts of the Jest platform and is now shipping with basic [snapshot support](https://github.com/avajs/ava#snapshot-testing) and is using [pretty-format](https://github.com/jestjs/jest/tree/main/packages/pretty-format). Consolidating test infrastructure makes it easier to learn how to test applications and enables us to share best practices. We are looking forward to see what we can learn from existing test libraries in the future.\\n\\nThe full [changelog can be found on GitHub](https://github.com/jestjs/jest/blob/main/CHANGELOG.md#jest-1900). Jest 19 was a true JavaScript community effort with [17 people who contributed](https://github.com/jestjs/jest/graphs/contributors?from=2016-12-23&to=2017-02-21&type=c) to this release. We thank each and every one of you for your help to make this project great.\\n\\n_This blog post was written by [Rogelio Guzman](https://twitter.com/rogeliog) and [Micha\u0142 Pierzcha\u0142a](https://twitter.com/thymikee)._"},{"id":"/2017/01/30/a-great-developer-experience","metadata":{"permalink":"/ro/blog/2017/01/30/a-great-developer-experience","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2017-01-30-a-great-developer-experience.md","source":"@site/blog/2017-01-30-a-great-developer-experience.md","title":"A Great Developer Experience","description":"We strongly believe that great documentation is crucial to providing a great developer experience. The docs should be clear, concise, and useful to new users and veterans alike. With that in mind, we recently took some time to overhaul the Jest website.","date":"2017-01-30T00:00:00.000Z","tags":[],"readingTime":2.43,"hasTruncateMarker":true,"authors":[{"name":"H\xe9ctor Ramos","socials":{"github":"https://github.com/hramos","x":"https://x.com/hectorramos"},"imageURL":"https://github.com/hramos.png","key":"hramos","page":null}],"frontMatter":{"title":"A Great Developer Experience","authors":"hramos"},"unlisted":false,"prevItem":{"title":"\ud83c\udccf Jest 19: Immersive Watch Mode & Test Platform Improvements","permalink":"/ro/blog/2017/02/21/jest-19-immersive-watch-mode-test-platform-improvements"},"nextItem":{"title":"2016 in Jest","permalink":"/ro/blog/2016/12/15/2016-in-jest"}},"content":"We strongly believe that great documentation is crucial to providing a great developer experience. The docs should be clear, concise, and useful to new users and veterans alike. With that in mind, we recently took some time to overhaul the Jest website.\\n\\n## Improved docs\\n\\nOne of the changes you\'ll notice upon visiting our docs is the updated sidebar. The documentation is now divided into three main areas: an introduction to Jest, detailed guides to Jest\'s features, and a comprehensive API reference.\\n\\nThe **Introduction** section will guide you from installing Jest and writing your first case, to using Jest\'s matchers and testing async code. If you\'re new to Jest or need a quick refresher, these docs should get you up to speed in no time. If you\'ve used Jest before and only need a quick reference on how it\'s installed, you need to go no further than the [Getting Started](/docs/getting-started) guide.\\n\\nOnce you feel comfortable using Jest, proceed to the advanced **Guides** section. The new [Snapshot Testing guide](/docs/snapshot-testing) covers everything you need to know about creating and maintaining snapshot test cases.\\n\\nFinally, we\'ve completely overhauled our API reference docs. You can now find detailed information on all of Jest\'s [Globals](/docs/api), [matchers](/docs/expect), and [every flag](/docs/cli) supported by the `jest` CLI.\\n\\n\x3c!--truncate--\x3e\\n\\n## New colors & website\\n\\nThe colors in the Jest logo and on the website have felt outdated to us for a while. We changed the color scheme we are using for Jest and changed the landing page significantly to be more inviting. We hope you like the new colors and showcase of Jest\'s strengths.\\n\\n## Who\'s using Jest?\\n\\nWe have created a [showcase of users](/) to highlight some of the companies that are using Jest. We\'re thankful to all of these companies for using Jest to test their websites, mobile apps, and APIs. If you\'re using Jest, check out the guidelines on GitHub and send us a pull request!\\n\\n<div class=\\"productShowcaseSection\\">\\n <div class=\\"logos\\">\\n   <img src=\\"/img/logos/twitter.png\\" title=\\"Twitter\\"/>\\n   <img src=\\"/img/logos/pinterest.png\\" title=\\"Pinterest\\"/>\\n   <img src=\\"/img/logos/paypal.png\\" title=\\"PayPal\\"/>\\n   <img src=\\"/img/logos/ibm.png\\" title=\\"IBM\\"/>\\n   <img src=\\"/img/logos/spotify.png\\" title=\\"Spotify\\"/>\\n </div>\\n</div>\\n\\n## Jest in the browser\\n\\nAs highlighted [last month](/blog/2016/12/15/2016-in-jest), it is now possible to use Jest directly in the browser using [repl.it](https://repl.it/languages/jest). If you want to try out Jest before installing it, you can easily do so below or directly from the Jest homepage. Go ahead and give it a try!\\n\\n<div class=\\"jest-repl\\">\\n  <iframe src=\\"https://repl.it/@amasad/try-jest?lite=true\\"></iframe>\\n</div>\\n\\n## Get involved\\n\\nThis is just the start. Go ahead and take a look at the docs, and don\'t hesitate to send any feedback our way. If you find a mistake in the docs or you just want to let us know what needs to be documented better, please tweet at us at [@jestjs\\\\_](https://twitter.com/jestjs_), [open an issue on GitHub](https://github.com/jestjs/jest/issues), or send us a PR by clicking \\"Edit on GitHub\\" at the top of the doc.\\n\\nWe\'re really excited for the year ahead and can\'t wait to hear from you!"},{"id":"/2016/12/15/2016-in-jest","metadata":{"permalink":"/ro/blog/2016/12/15/2016-in-jest","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2016-12-15-2016-in-jest.md","source":"@site/blog/2016-12-15-2016-in-jest.md","title":"2016 in Jest","description":"2016 was a big year for JavaScript testing with Jest. In the first six months of the year we rewrote Jest and built a solid foundation to significantly improve performance and the developer experience of testing JavaScript code. We flow-typed the entire codebase, built a ton of integration tests for Jest itself and adopted lerna to turn Jest from a framework into a Painless JavaScript Testing platform.","date":"2016-12-15T00:00:00.000Z","tags":[],"readingTime":7.065,"hasTruncateMarker":true,"authors":[{"name":"Christoph Nakazawa","url":"https://github.com/cpojer","socials":{"github":"https://github.com/cpojer","x":"https://x.com/cpojer"},"imageURL":"https://github.com/cpojer.png","key":"cpojer","page":null}],"frontMatter":{"title":"2016 in Jest","authors":"cpojer"},"unlisted":false,"prevItem":{"title":"A Great Developer Experience","permalink":"/ro/blog/2017/01/30/a-great-developer-experience"},"nextItem":{"title":"Jest 16.0: Turbocharged CLI & Community Update","permalink":"/ro/blog/2016/10/03/jest-16"}},"content":"2016 was a big year for JavaScript testing with Jest. In the first six months of the year we rewrote Jest and built a solid foundation to significantly improve performance and the developer experience of testing JavaScript code. We flow-typed the entire codebase, built a ton of integration tests for Jest itself and adopted [lerna](https://lernajs.io/) to turn Jest from a framework into a [_Painless JavaScript Testing platform_](https://github.com/jestjs/jest/tree/main/packages).\\n\\nThe newly created [react-test-renderer](https://yarnpkg.com/en/package/react-test-renderer) finally enabled testing of react-native components. Through the jest-react-native preset (now merged directly into react-native) Jest now works out of the box for any React project and comes pre-configured in [create-react-app](https://github.com/facebookincubator/create-react-app) and [react-native](https://github.com/facebook/react-native) projects. We integrated core pieces of Jest into [react-native\'s packager](https://github.com/facebook/react-native/tree/main/packager/react-packager/src) and the completely new snapshot testing feature has since been used outside of Jest: It was integrated with React Storybook as \u201c[storyshots](https://github.com/storybooks/storyshots)\u201d and is being adopted by other test runners like [ava](https://github.com/avajs/ava/pull/1113).\\n\\n\x3c!--truncate--\x3e\\n\\nThe [pretty-format](https://github.com/jestjs/jest/tree/main/packages/pretty-format) project was rewritten with performance in mind to drive Jest\'s snapshot feature, was recently merged into Jest\'s monorepo and is also helpful in other [test runners](https://github.com/avajs/ava/pull/1154). Nowadays Jest is much more about collecting different ideas and solutions to testing than it is about one specific implementation of a test framework.\\n\\nI\'d like to deeply thank all the people that have [contributed to Jest this year](https://github.com/jestjs/jest/graphs/contributors?from=2016-01-01&to=2016-12-14&type=c), both from the open source community and at Facebook: Dmitrii Abramov, Cristian Carlesso, Dan Abramov, Daniel Lo Nigro, Maxim Derbin, Evan Scott, Forbes Lindesay, Keyan Zhang and 60 more people. We\'d also like to welcome [Micha\u0142 Pierzcha\u0142a (@thymikee)](https://twitter.com/thymikee) as first official external contributor to Jest. He\'s been doing a great job managing the issues and PRs on the repo. If you\'d like to start contributing to Jest, we have a bunch of [good first tasks](https://github.com/jestjs/jest/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+bug%22) and we are always happy to help on our [discord channel](https://discord.gg/j6FKKQQrW9).\\n\\n## [repl.it](http://repl.it/) with Jest integration\\n\\nAmjad Massad [built a Jest container](https://repl.it/languages/jest) so you can now try out Jest directly in the browser. You can use it from now on when creating GitHub issues which should help troubleshoot problems more quickly. Amjad and Haya are building [repl.it](http://repl.it/) to democratize programming by building powerful yet simple tools and platforms for educators, learners, and developers. They are also [hiring talented engineers](https://repl.it/site/jobs)!\\n\\n<div class=\\"jest-repl\\">\\n  <iframe src=\\"https://repl.it/languages/jest?lite=true\\"></iframe>\\n</div>\\n\\n## Community Update\\n\\nWe feel incredibly humbled that 100+ companies [have adopted Jest](https://twitter.com/cpojer/status/803965499407290369) in the last six months. Companies like Twitter, Pinterest, Paypal, nytimes, IBM (Watson), Spotify, eBay, SoundCloud, Intuit, FormidableLabs, Automattic, Trivago and Microsoft have either fully or partially switched to Jest for their JavaScript testing needs. Thank you very much for giving this project a chance. We would also like to thank everyone who went to conferences and meetups to speak about Jest and to everyone who is writing blog posts about how Jest is or isn\'t working for them!\\n\\nHere is what happened in the community in the last two months:\\n\\n- Jason Bonta and Dmitrii Abramov [redefined the \u201ctesting pyramid\u201d](https://twitter.com/abramov_dmitrii/status/805913874704674816) we were talking a lot about at Facebook.\\n- [jest-codemods](https://github.com/skovhus/jest-codemods#jest-codemods) now allows you to painlessly migrate from Mocha, Tape and Ava to Jest.\\n- The React team announced [improvements to the react-test-renderer](https://facebook.github.io/react/blog/2016/11/16/react-v15.4.0.html) in 15.4.0.\\n- Orta Therox build an amazing [vscode-jest integration](https://github.com/orta/vscode-jest#the-aim) and donated the code for editor support to Jest.\\n- Pavithra Kodmad is documenting [Flipkarts adoption of Jest](http://pksjce.github.io/2016/12/08/notes-on-jest) and shares some getting started tips.\\n- Kent C. Dodds wrote about [migrating to Jest at Paypal](https://medium.com/@kentcdodds/migrating-to-jest-881f75366e7e#.ticf0wchu) and Jason Brown [wrote about migrating to Jest as well](http://browniefed.com/blog/migrating-ava-to-jest/).\\n- Ben McCormick wrote about [saving time with Jest](http://benmccormick.org/2016/12/10/saving-time-with-jest/).\\n- Eric Clemmons wrote about [snapshots and storybook integration](https://medium.com/@ericclemmons/jest-snapshots-for-storybook-5bf36b5e5a3a).\\n- Edvin Erikson wrote about [getting Tap output in Jest](https://medium.com/@edvinerikson/getting-jest-output-in-tap-format-6e07dc2c484c#.1l4edixhl).\\n- [jest-html](https://github.com/guigrpa/jest-html#jest-html--) can bring snapshot diffing to your browser.\\n- There were a few [great conversations on hackernews](https://news.ycombinator.com/item?id=13128146) about Jest.\\n- The community started a great discussion about the [future of enzyme](https://github.com/airbnb/enzyme/issues/715).\\n- Ruben Oostinga wrote about [combining chai and Jest matchers](https://medium.com/@RubenOostinga/combining-chai-and-jest-matchers-d12d1ffd0303#.87si0ra2h).\\n- Emil Ong wrote about why [\u201cTDD\'ing your frontend seems pointless\u201d](https://engineering.haus.com/why-tdding-your-frontend-feels-pointless-5f710fea7325#.pql79knnm).\\n- Nate Hunzaker wrote about [end-to-end testing with Jest and Nightmare](https://www.viget.com/articles/acceptance-testing-react-apps-with-jest-and-nightmare).\\n- [Using Jest with Angular just works](https://medium.com/aya-experience/testing-an-angularjs-app-with-jest-3029a613251#.h9badqevy) according to Matthieu Lux.\\n- A fantastic conversation about the [purpose of snapshot testing](https://github.com/jestjs/jest/issues/2197) is happening right now.\\n- Dmitrii made a new [music video with his metal band](https://twitter.com/abramov_dmitrii/status/806613542447157248).\\n- [lazyspec](https://yarnpkg.com/en/package/lazyspec) can help you create smoke tests quickly if you are introducing tests to an existing codebase.\\n- Patrick Stapfer did a lightning talk about [vim and Jest](https://twitter.com/ryyppy/status/803871975995277312).\\n- Mark Dalgleish was [commenting on the value of snapshot testing](https://twitter.com/markdalgleish/status/806608159527747584).\\n\\n## New features, changes and fixes in Jest 17 & 18\\n\\nJest was initially created more than five years ago and as such an old framework it has accumulated some technical debt. This is why we tend to make breaking changes more often than may seem necessary: We believe it is important to incrementally reduce technical debt to ensure that Jest as a project stays maintainable long-term. We didn\'t announce Jest 17 in a blog post and if you haven\'t upgraded to it in the last month you may find the [changelog](https://github.com/jestjs/jest/blob/main/CHANGELOG.md) useful.\\n\\n- **Breaking:** Removed `pit` in favor of `it` or `test` and `mockImpl` in favor of `jest.fn()` or `mockImplementation` .\\n- **Breaking:** Renamed `--jsonOutputFile` to `--outputFile`.\\n- **Breaking:** Updated `testRegex` to include `test.js` and `spec.js` files.\\n- **Breaking:** Replaced `scriptPreprocessor` with the new `transform` option.\\n- **Breaking:** The `testResultsProcessor` function is now required to return the modified results.\\n- **Potentially Breaking:** Properly resolve `snapshotSerializers`, `setupFiles`, `transform`, `testRunner` and `testResultsProcessor` with a resolution algorithm instead of using `path.resolve`. This mainly means that `<rootDir>` is no longer needed for these options.\\n- **Added:** `pretty-format` and `jest-editor-support` were merged into Jest.\\n- **Added:** `expect.any`, `expect.anything`, `expect.objectContaining`, `expect.arrayContaining`, `expect.stringMatching`.\\n- **Added:** `--testResultsProcessor` is now exposed through the cli.\\n- **Added:** Implemented file watching in `jest-haste-map`.\\n- **Added:** Usage of Jest in watch mode can be hidden through `JEST_HIDE_USAGE`.\\n- **Added:** `expect.assertions(number)` which will ensure that a specified amount of assertions is made in one test.\\n- **Added:** `.toMatchSnapshot(?string)` feature to give snapshots a name.\\n- **Added:** `toMatchObject`, `toHaveProperty` , `toHaveLength` matchers.\\n- **Added:** `expect.extend`.\\n- **Added:** Added support for custom snapshots serializers.\\n- **Added:** Big diffs are now collapsed by default in snapshots and assertions. Added `--expand` (or `-e`) to show the full diff.\\n- **Added:** `jest.resetAllMocks` which replaces `jest.clearAllMocks`.\\n- **Added:** `--json` now includes information about individual tests inside a file.\\n- **Fixed:** `test.concurrent` unhandled promise rejections.\\n- **Fixed:** `babel-plugin-jest-hoist` when using `jest.mock` with three arguments.\\n- **Fixed:** The `JSON` global in `jest-environment-node` now comes from the vm context instead of the parent context.\\n- **Fixed:** Jest does not print stack traces from babel any longer.\\n- **Fixed:** Fake timers are reset when `FakeTimers.useTimers()` is called.\\n- **Fixed:** Regular expressions are properly escaped in snapshots.\\n- **Fixed:** Improved pretty printing of large objects.\\n- **Fixed:** `NaN% Failed` in the OS notification when using `--notify`.\\n- **Fixed:** The first test run without cached timings will now use separate processes instead of running in band.\\n- **Fixed:** `Map`/`Set` comparisons.\\n- **Fixed:** `test.concurrent` now works with `--testNamePattern`.\\n- **Fixed:** Improved `.toContain` matcher.\\n- **Fixed:** Properly resolve modules with platform extensions on react-native.\\n- **Fixed:** global built in objects in `jest-environment-node` now work properly.\\n- **Fixed:** Create mock objects in the vm context instead of the parent context.\\n- **Fixed:** `.babelrc` is now part of the transform cache key in `babel-jest`.\\n- **Fixed:** docblock parsing with haste modules.\\n- **Fixed:** Exit with the proper code when the coverage threshold is not reached.\\n- **Fixed:** Jest now clears the entire scrollback in watch mode.\\n- **Deprecated:** `jest-react-native` was deprecated and now forwards `react-native`.\\n\\n## Plans for Jest in H1 2017\\n\\nSix months ago [we shared our plans for Jest](/blog/2016/07/27/jest-14#what-s-next-for-jest) and we are happy that we were able to execute well on almost all of them. For the next six months, here is what we are planning:\\n\\n- **Instant feedback:** [Nuclide](https://nuclide.io/) integration and an improved and [faster watch mode](https://github.com/jestjs/jest/pull/2324#issuecomment-267149669).\\n- **Improved developer experience:** new mocking APIs and improved assertions.\\n- **Better performance and memory usage:** analyze Jest and be more conscious about efficiency.\\n- **Snapshot Improvements:** snapshot approval mode, syntax highlighting and improved `react-test-renderer` APIs.\\n- **Website:** We\'ll overhaul the website and documentation and add a Jest cheat sheet.\\n\\nWe won\'t be providing timelines or estimates for these features and we may not actually get to all of these things. If you\'d like to help make these things a reality, send us issues and pull requests with your ideas and let\'s work on improving Jest together in 2017."},{"id":"/2016/10/03/jest-16","metadata":{"permalink":"/ro/blog/2016/10/03/jest-16","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2016-10-03-jest-16.md","source":"@site/blog/2016-10-03-jest-16.md","title":"Jest 16.0: Turbocharged CLI & Community Update","description":"It\'s been one month since the last major release and we\'ve made significant improvements to Jest since. In this major release we are updating the snapshot format we are using which will likely require snapshots to be updated when upgrading Jest. We don\'t make these changes lightly and don\'t expect this to happen often but we think it is necessary to improve the format from time to time.","date":"2016-10-03T00:00:00.000Z","tags":[],"readingTime":5.84,"hasTruncateMarker":true,"authors":[{"name":"Christoph Nakazawa","url":"https://github.com/cpojer","socials":{"github":"https://github.com/cpojer","x":"https://x.com/cpojer"},"imageURL":"https://github.com/cpojer.png","key":"cpojer","page":null}],"frontMatter":{"title":"Jest 16.0: Turbocharged CLI & Community Update","authors":"cpojer"},"unlisted":false,"prevItem":{"title":"2016 in Jest","permalink":"/ro/blog/2016/12/15/2016-in-jest"},"nextItem":{"title":"Jest 15.0: New Defaults for Jest","permalink":"/ro/blog/2016/09/01/jest-15"}},"content":"It\'s been one month since the last major release and we\'ve made significant improvements to Jest since. In this major release we are updating the snapshot format we are using which will likely require snapshots to be updated when upgrading Jest. We don\'t make these changes lightly and don\'t expect this to happen often but we think it is necessary to improve the format from time to time.\\n\\n## Upgraded CLI\\n\\n![reporter](/img/blog/16-reporter.gif)\\n\\nJest 16 features a new reporter interface that shows running tests as well as a live summary and a progress bar based on the estimated test runtime from previous test runs. We also improved the CLI output to work better with different color schemes. If there were test failures in a previous run, Jest will now always run those tests first to give useful signal to users as quickly as possible.\\n\\n\x3c!--truncate--\x3e\\n\\nWe also added a lot of new features which you may find useful:\\n\\n- New CLI flags were added: A `--testNamePattern=pattern` or `-t <pattern>` option was added to filter tests from the command line much like `it.only` or `fit` does in tests.\\n- Previously failed tests now always run first.\\n- `jest <pattern>` is now case-insensitive to make it easier to filter test files.\\n- A test run in watch mode can now be interrupted. During a test run, simply press any of the keys used for input during watch mode (`a`, `o`, `p`, `q` or `enter`) to abort a test run and start a new one.\\n- The `--bail` flag now also works in watch mode. Together with running failed tests first, Jest\'s watch mode will now feel turbocharged!\\n- Jest now automatically considers files and tests with the `jsx` extension.\\n- Jest warns about duplicate manual mock files and we improved automatically created mocks for ES modules compiled with babel.\\n- A `jest.clearAllMocks` function was added to clear all mocks in between tests.\\n- We improved module resolution when `moduleNameMapper` is used.\\n- Finally, a `--findRelatedTests <fileA> <fileB>` cli option was added to run tests related to the specified files. This is especially helpful as a pre-commit hook if you\'d like to run tests only on a specified set of files that have tests associated with them.\\n\\nThis is what Jest looks like when a test run is interrupted in watch mode: ![watch](/img/blog/16-watch.gif)\\n\\n## Snapshot Updates\\n\\nJest\'s snapshot implementation was completely rewritten. The new version of the `jest-snapshot` package is now structured in a way that allows for easier integration into other test runners and enables more cool integrations like with [React Storybook](https://voice.kadira.io/snapshot-testing-in-react-storybook-43b3b71cec4f#.qh4lzcadb). Jest doesn\'t mark snapshots as obsolete in a file with skipped or failing tests. We also made a number of changes to the snapshot format:\\n\\n- Objects and Arrays are now printed with a trailing comma to minimize future changes to snapshots.\\n- We removed function names from snapshots. They were causing issues with different versions of Node, with code coverage instrumentation and we generally felt like it wasn\'t useful signal to show to the user that the name of a function has changed.\\n- Snapshots are now sorted using natural sort order within a file.\\n\\nWhen upgrading to Jest 16, the diff might look similar to this one: ![snapshots](/img/blog/16-snapshots.png)\\n\\n## Test Library Updates\\n\\nWe finished the migration of Jasmine assertions to the new Jest matchers. We added three new matchers: `toBeInstanceOf`, `toContainEqual` and `toThrowErrorMatchingSnapshot` . We have more readable failure messages for the spy/mock matchers `toHaveBeenLastCalledWith`, `toHaveBeenCalledWith`, `lastCalledWith` and `toBeCalledWith`. Now that we have rewritten all assertions and separated them into their own package, we\'ll be working on making them standalone so they can be integrated into any test framework if you\'d like to use them outside of Jest.\\n\\nWe also added a bunch of aliases that were requested by the community. To make Jest focus on a single test you can now use either `it.only` or `test.only` or keep using `fit`; For skipping a test, `it.skip` or `test.skip` are now available alongside of `xit`; finally to define a test as concurrent you can use `test.concurrent` which is useful in case your test accesses network resources or databases.\\n\\nFinally, if you\'d like to overwrite the `expect` global with a different assertion library like [chai](http://chaijs.com/), this can now be done using the `setupTestFrameworkScriptFile` configuration option.\\n\\n## Community Update\\n\\nOver the last month lots of articles were written about Jest\'s snapshot testing feature, how to migrate to Jest and how to get started writing tests. I also did a few live videos to explain how Jest and snapshot testing works:\\n\\n- [FB Live Video about Snapshot Testing](https://www.facebook.com/react/videos/1035427199869020/).\\n- [JavaScript & React Testing with Kent C. Dodds](https://www.youtube.com/watch?v=i31VtyJSM-I&feature=youtu.be).\\n\\nA number of people wrote articles about snapshot testing. The most opinionated article that resonated with the Jest team was \u201c[Testing with Jest Snapshots: First Impressions](http://benmccormick.org/2016/09/19/testing-with-jest-snapshots-first-impressions/)\u201d. Ben makes three great points in his blog post:\\n\\n1.  Snapshot tests are a complement for conventional tests not a replacement.\\n2.  Snapshot tests are more useful with a healthy code review process.\\n3.  Snapshot tests work well with auto-mocking.\\n\\nWe highly recommend reading the entire blog post. Ben did a fantastic job explaining the reasons why we built snapshot testing. It\'s important to point out that we didn\'t introduce snapshot testing to replace all other forms of testing but rather as a way to enable engineers to write tests for code that they otherwise wouldn\'t write tests for. It works well for things like React components, CLI output, error messages and many others but it doesn\'t solve all problems. Jest\'s goal is to provide many different ways to write effective tests without sacrificing performance or the project\'s maintainability.\\n\\nOther highlights about snapshot testing:\\n\\n- A React Native testing series: [Part 1: Jest \u2013 Snapshot come into play](https://blog.callstack.io/unit-testing-react-native-with-the-new-jest-i-snapshots-come-into-play-68ba19b1b9fe) and [Part 2: Jest \u2013 Redux Snapshots for your Actions and Reducers](https://blog.callstack.io/unit-testing-react-native-with-the-new-jest-ii-redux-snapshots-for-your-actions-and-reducers-8559f6f8050b#.putt9eipm).\\n- [How we landed on Jest snapshot testing for JavaScript](https://blog.grommet.io/post/2016/09/01/how-we-landed-on-jest-snapshot-testing-for-javascript).\\n- [Picture This: Snapshot Testing](http://guigrpa.github.io/2016/09/27/picture-this-snapshot-testing/).\\n- [Snapshot testing with React Storybook](https://voice.kadira.io/snapshot-testing-in-react-storybook-43b3b71cec4f).\\n- [Testing React and Redux Applications](https://medium.com/@ryancollinsio/testing-react-redux-applications-fee79ac0087f#.lyjl7st1n).\\n- If you are using the popular [enzyme](https://github.com/airbnb/enzyme) testing utility, there is now a project [enzyme-to-json](https://github.com/trayio/enzyme-to-json) which makes it possible to use Jest\'s snapshot testing feature together with enzyme.\\n\\n[Redux itself now uses Jest](https://github.com/reactjs/redux/commit/7296d3cba1f5f899bdee5ef6695a8d21149f8d6c) and Max Stoiber wrote a [tutorial on how to test code written with redux](http://academy.plot.ly/react/6-testing/). There is also a great [guide on how to write tests for MobX](https://semaphoreci.com/community/tutorials/how-to-test-react-and-mobx-with-jest). If you are using [create-react-app](https://github.com/facebookincubator/create-react-app), Jest is now included by default. Kent C. Dodds created a ton of [videos on egghead.io](https://egghead.io/lessons/javascript-use-jest-s-snapshot-testing-feature?pl=testing-javascript-with-jest-a36c4074) that will help you get started with Jest.\\n\\nIf you are using other test runners, Kenneth Skovhus built an awesome [jest-codemods](https://github.com/skovhus/jest-codemods) library that will automate the conversion for you. Codemods are awesome: they\'ll allow you to quickly evaluate whether Jest will work for you. Give it a try!\\n\\nThe full [changelog can be found on GitHub](https://github.com/jestjs/jest/blob/main/CHANGELOG.md#jest-1600). Jest 16 was a true JavaScript community effort and the project now has more than 220 contributors. We thank each and every one of you for your help to make this project great."},{"id":"/2016/09/01/jest-15","metadata":{"permalink":"/ro/blog/2016/09/01/jest-15","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2016-09-01-jest-15.md","source":"@site/blog/2016-09-01-jest-15.md","title":"Jest 15.0: New Defaults for Jest","description":"We spent the past year making Jest faster, easier to configure, added tons of features and built snapshot testing. However, there were two areas where we invested very little we can move fast and improve the framework for Facebook and the open source community at light-speed. Jest\'s goal is to come with batteries included and to require as little configuration as necessary. We recently got a chance to explain our philosophy on a create-react-app issue.","date":"2016-09-01T00:00:00.000Z","tags":[],"readingTime":7.205,"hasTruncateMarker":true,"authors":[{"name":"Christoph Nakazawa","url":"https://github.com/cpojer","socials":{"github":"https://github.com/cpojer","x":"https://x.com/cpojer"},"imageURL":"https://github.com/cpojer.png","key":"cpojer","page":null}],"frontMatter":{"title":"Jest 15.0: New Defaults for Jest","authors":"cpojer"},"unlisted":false,"prevItem":{"title":"Jest 16.0: Turbocharged CLI & Community Update","permalink":"/ro/blog/2016/10/03/jest-16"},"nextItem":{"title":"Jest 14.0: React Tree Snapshot Testing","permalink":"/ro/blog/2016/07/27/jest-14"}},"content":"We spent the past year making Jest [faster](/blog/2016/03/11/javascript-unit-testing-performance), [easier to configure](/blog/2016/04/12/jest-11), [added tons of features](/blog/2016/06/22/jest-13) and built [snapshot testing](/blog/2016/07/27/jest-14). However, there were two areas where we invested very little: the CLI output and user experience. With Jest 15 we are changing the framework radically to make it easier to use both for beginners and experienced users. We are excited that our investment in Jest is now paying off: we can move fast and improve the framework for Facebook and the open source community at light-speed. Jest\'s goal is to come with batteries included and to require as little configuration as necessary. We recently got a chance to explain our philosophy on a [create-react-app issue](https://github.com/facebookincubator/create-react-app/pull/250#issuecomment-237098619).\\n\\nThe most important change to talk about is a set of [new defaults](https://github.com/jestjs/jest/pull/1511). If you are an existing Jest user you will very likely need to update your configuration for Jest 15. In most cases it will simplify your setup and Jest will provide useful error messages during the upgrade. All of the new defaults can be disabled to suit your needs, but we still consider the disabled features critical for Jest in certain situations and will continue to use and support them at Facebook long-term. Our [API documentation](/docs/api) was also completely rewritten to reflect these changes. [This pull request for React](https://github.com/facebook/react/pull/7625/files) highlights some of the changes necessary for existing projects.\\n\\n\x3c!--truncate--\x3e\\n\\n## New CLI error messages and summaries\\n\\nAs part of our effort to remove Jasmine incrementally within Jest, replacing all Jasmine matchers was almost completed. A lot of time was spent tweaking every error message for every matcher to give the best signal to users when a test is failing \u2013 the time when Jest should provide the most value to you. In addition to printing the expected and received values, a diff is printed for the `toBe` and `toEqual` matchers to help spot mistakes. More colors were added and relevant files from stack traces are highlighted more prominently.\\n\\nHere is a comparison of the before and after on a light terminal: ![failure1](/img/blog/15-failure1.png) It also works well with darker colors: ![failure2](/img/blog/15-failure2.png)\\n\\n## New watch command\\n\\nWe completely rewrote `jest --watch` to be more interactive. It can now switch between running all tests or only test files related to changed files by pressing `a` or `o`. By pressing `p` a prompt appears that allows to specify a test pattern to focus on a specific set of files. Snapshot tests can be updated by pressing `u`.\\n\\n![watch](/img/blog/15-watch.gif)\\n\\n## jest-react-native improvements\\n\\nMocks for `ListView`, `TextInput`, `ActivityIndicator`, `ScrollView` and more were added. The existing mocks were updated to use the real implementations and existing snapshots likely have to be updated when upgrading to Jest 15. A `mockComponent` function was added to `jest-react-native` that can be used to mock native components:\\n\\n```js\\njest.mock(\'MyNativeComponent\', () => {\\n  const jestReactNative = require(\'jest-react-native\');\\n  return jestReactNative.mockComponent(\'MyNativeComponent\');\\n});\\n```\\n\\nThere have also been a number of improvements around mocking images, the fetch module and other native APIs.\\n\\n## Buffered Console Messages\\n\\nJest parallelizes test runs across workers to maximize performance. Previously Jest used to forward console messages from workers to the parent and printed them immediately. When running multiple tests in parallel, it was often hard to find out which test and which module was calling a log function. In Jest 15, all console messages are buffered and printed together with individual test results. In addition the file and line number of the log call is printed so the code can easily be inspected.\\n\\nCompare the output of the previous version of Jest and Jest 15: ![console](/img/blog/15-console.png)\\n\\n## Disabled Automocking\\n\\nAutomocking is now disabled by default in Jest. This is by far the most confusing feature for new users and in many ways it doesn\'t make sense for small projects. We introduced automocking at Facebook and it worked great for us when unit testing was adopted in a large existing code base with few existing tests, but over time it felt like people spent more time fighting with mocked/unmocked modules than it would have taken them to write a test normally. We also noticed that library authors often require a huge number of basic modules that always have to be manually unmocked. Even for Jest itself we realized that the majority of tests had automocking disabled manually. We still believe that explicit automocking can be incredibly valuable. This change simply trades implicit mocks for explicit mocks via calls to `jest.mock(moduleName)`.\\n\\nIf you would still like to use automocking by default, enable the `automock` setting in your configuration or manually call `jest.enableAutomock()` in your test or setup file.\\n\\n## Test File Patterns\\n\\nNot everyone uses the same convention of using a `__tests__` folder to store tests. Jest 15 also looks for files ending in `.spec.js` or `.test.js`, two popular community standards. Jest 15 also removes the `testDirectoryName` and `testFileExtensions` configuration options and asks users to switch to the `testRegex` option when the old configuration options are used.\\n\\n## Module Registry Persistence\\n\\nJest used to implicitly reset all modules before each test and we recommended requiring modules in `beforeEach` or inside of tests. This is useful when modules have local state that shouldn\'t be shared between tests. However, two big shifts happened: ES modules with the top-level `import` syntax and a renewed interest in writing stateless functional modules.\\n\\nThis has lead to numerous incompatibilities. We also noticed that at Facebook we weren\'t even using this implicit reset. Instead we relied on explicit calls to `jest.resetModules()` which puts engineers in control on when to wipe away all state.\\n\\nHere is an example:\\n\\n```js\\nconst React1 = require(\'react\');\\njest.resetModules();\\nconst React2 = require(\'react\');\\n\\nReact1 !== React2; // These two are separate copies of React.\\n```\\n\\nThe call to `resetModules` wipes away the require cache. A second call to require the same module will result in a new instantiation of the same module and all of its dependencies. This feature is especially useful when dealing with modules that have side effects, like [jest-haste-map](https://github.com/jestjs/jest/blob/3bbf32a239fc4aad8cc6928a787f235bd86fecac/packages/jest-haste-map/src/__tests__/index-test.js#L64).\\n\\nWe believe it is better to put users in control so we disabled the implicit reset. Modules can be reset using `jest.resetModules()` in code and the `resetModules` option can be enabled in the configuration to bring back the previous behavior.\\n\\n## Real vs Fake Timers\\n\\nBy default Jest used to mock all timer functions like `setTimeout` or `process.nextTick` and provided an API `jest.runAllTimers()` to advance timers programatically. This is useful when a piece of code sets a long timeout that we don\'t want to wait for in a test.\\n\\nHowever we found that most of the time the use cases are quite isolated. [Async programming](/docs/tutorial-async) has also become much simpler in our test runner. Jest now uses the real timers by default.\\n\\nYou can still override this by specifying `\\"timers\\": \\"fake\\"` in the configuration or by calling `jest.useRealTimers()` and `jest.useFakeTimers()` global switches.\\n\\n## setupEnvScriptFile vs setupFiles\\n\\nThe `setupEnvScriptFile` configuration option has been deprecated for a while. Jest 15 removes it completely and replaces it with `setupFiles`. This option expects an array of file paths that are loaded in order before a test file is executed.\\n\\n## Rewritten Code Coverage Support\\n\\nCode coverage in Jest can be used through `jest --coverage` and requires no additional packages or configuration. Code coverage support was completely rewritten and a new `collectCoverageFrom` option was added to collect code coverage information from entire projects, including **untested files**. Note that this option uses globs as we are hoping to further simplify configuration options in the future and provide a simpler alternative to regular expressions. See Jest\'s [package.json](https://github.com/jestjs/jest/blob/9088f6517813f6c089cf52e980d6579511dcde88/package.json#L47) for an example.\\n\\n## Other Improvements\\n\\nA huge number of other improvements were also made:\\n\\n- Improved performance of small test runs.\\n- Jest now uses verbose mode when only a single test file is executed.\\n- Added an `--env` option to override the configured test environment.\\n- `moduleNameMapper` now uses a resolution algorithm.\\n- Jest now works with paths that have special characters in them, like parenthesis.\\n- Added `global.global` to the node environment.\\n- Fixed `babel-plugin-jest-hoist`\'s invalid error when a random user function was called `mock`.\\n- Fix `testEnvironment` resolution to prefer `jest-environment-{name}` instead of `{name}` only. This prevents a module collision when using `jsdom` as test environment.\\n- Improvements to Jest\'s own test infra by merging integration and unit tests. Code coverage is now collected for Jest.\\n\\nWe are happy when looking back at all the changes we have made together with the help from the community and couldn\'t be more excited to make Jest even better over the course of the next few months. Please [file an issue](https://github.com/jestjs/jest/issues) if something isn\'t working as expected and send us pull requests.\\n\\nNext up: [Concurrent Reporter](https://github.com/jestjs/jest/pull/1480)."},{"id":"/2016/07/27/jest-14","metadata":{"permalink":"/ro/blog/2016/07/27/jest-14","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2016-07-27-jest-14.md","source":"@site/blog/2016-07-27-jest-14.md","title":"Jest 14.0: React Tree Snapshot Testing","description":"One of Jest\'s philosophies is to provide an integrated \u201czero-configuration\u201d experience. We want to make it as frictionless as possible to write good tests that are useful. We observed that when engineers are provided with ready-to-use tools, they end up writing more tests, which in turn results in stable and healthy code bases.","date":"2016-07-27T00:00:00.000Z","tags":[],"readingTime":5.355,"hasTruncateMarker":true,"authors":[{"name":"Christoph Nakazawa","url":"https://github.com/cpojer","socials":{"github":"https://github.com/cpojer","x":"https://x.com/cpojer"},"imageURL":"https://github.com/cpojer.png","key":"cpojer","page":null}],"frontMatter":{"title":"Jest 14.0: React Tree Snapshot Testing","authors":"cpojer"},"unlisted":false,"prevItem":{"title":"Jest 15.0: New Defaults for Jest","permalink":"/ro/blog/2016/09/01/jest-15"},"nextItem":{"title":"Jest 13.0: Flow & REPL","permalink":"/ro/blog/2016/06/22/jest-13"}},"content":"One of Jest\'s philosophies is to provide an integrated \u201czero-configuration\u201d experience. We want to make it as frictionless as possible to write good tests that are useful. We observed that when engineers are provided with ready-to-use tools, they end up writing more tests, which in turn results in stable and healthy code bases.\\n\\nOne of the big open questions was how to write React tests efficiently. There are plenty of tools such as [ReactTestUtils](https://facebook.github.io/react/docs/test-utils.html) and [enzyme](https://enzymejs.github.io/enzyme/). Both of these tools are great and are actively being used. However engineers frequently told us that they spend more time writing a test than the component itself. As a result many people stopped writing tests altogether which eventually led to instabilities. Engineers told us all they wanted was to make sure their components don\'t change unexpectedly.\\n\\n\x3c!--truncate--\x3e\\n\\nTogether with the React team we created a new test renderer for React and added snapshot testing to Jest. Consider this [example test](https://github.com/jestjs/jest/blob/main/examples/snapshot/__tests__/link.test.js) for a simple [Link component](https://github.com/jestjs/jest/blob/main/examples/snapshot/Link.js):\\n\\n```javascript\\nimport renderer from \'react-test-renderer\';\\ntest(\'Link renders correctly\', () => {\\n  const tree = renderer\\n    .create(<Link page=\\"http://www.facebook.com\\">Facebook</Link>)\\n    .toJSON();\\n  expect(tree).toMatchSnapshot();\\n});\\n```\\n\\nThe first time this test is run, Jest creates a [snapshot file](https://github.com/jestjs/jest/blob/main/examples/snapshot/__tests__/__snapshots__/link.test.js.snap) that looks like this:\\n\\n```javascript\\nexports[`Link renders correctly 1`] = `\\n<a\\n  className=\\"normal\\"\\n  href=\\"http://www.facebook.com\\"\\n  onMouseEnter={[Function bound _onMouseEnter]}\\n  onMouseLeave={[Function bound _onMouseLeave]}>\\n  Facebook\\n</a>\\n`;\\n```\\n\\nThe snapshot artifact should be committed alongside code changes. We use [pretty-format](https://github.com/thejameskyle/pretty-format) to make snapshots human-readable during code review. On subsequent test runs Jest will simply compare the rendered output with the previous snapshot. If they match, the test will pass. If they don\'t match, either the implementation has changed and the snapshot needs to be updated with `jest -u`, or the test runner found a bug in your code that should be fixed.\\n\\nIf we change the address the Link component in our example is pointing to, Jest will print this output:\\n\\n![snapshot-testing](/img/blog/snapshot.png)\\n\\nNow you know that you either need to accept the changes with `jest -u`, or fix the component if the changes were unintentional. To try out this functionality, please clone the [snapshot example](https://github.com/jestjs/jest/tree/main/examples/snapshot), modify the Link component and run Jest. We updated the [React Tutorial](/docs/tutorial-react) with a new guide for snapshot testing.\\n\\nThis feature was built by [Ben Alpert](https://twitter.com/soprano) and [Cristian Carlesso](https://twitter.com/kentaromiura).\\n\\n## Experimental React Native support\\n\\nBy building a test renderer that targets no specific platform we are finally able to support a full, unmocked version of React Native. We are excited to launch experimental React Native support for Jest through the `jest-react-native` package.\\n\\nYou can start using Jest with react-native by running `yarn add --dev jest-react-native` and by adding the preset to your Jest configuration:\\n\\n```json\\n\\"jest\\": {\\n  \\"preset\\": \\"jest-react-native\\"\\n}\\n```\\n\\n- [Tutorial and setup guide](/docs/tutorial-react-native#content)\\n- [Example project](https://github.com/jestjs/jest/tree/main/examples/react-native)\\n- [Example pull request for _snowflake_](https://github.com/bartonhammond/snowflake/pull/110), a popular react-native open source library.\\n\\n:::info\\n\\nThe preset currently only implements the minimal set of configuration necessary to get started with React Native testing. We are hoping for community contributions to improve this project. Please try it and file [issues](https://github.com/jestjs/jest/issues) or send pull requests!\\n\\n:::\\n\\n## Why snapshot testing?\\n\\nFor Facebook\'s native apps we use a system called \u201csnapshot testing\u201d: a snapshot test system that renders UI components, takes a screenshot and subsequently compares a recorded screenshot with changes made by an engineer. If the screenshots don\'t match, there are two possibilities: either the change is unexpected or the screenshot can be updated to the new version of the UI component.\\n\\nWhile this was the solution we wanted for the web, we also found many problems with such end-to-end tests that snapshot integration tests solve:\\n\\n- **No flakiness:** Because tests are run in a command line runner instead of a real browser or on a real phone, the test runner doesn\'t have to wait for builds, spawn browsers, load a page and drive the UI to get a component into the expected state which tends to be flaky and the test results become noisy.\\n- **Fast iteration speed:** Engineers want to get results in less than a second rather than waiting for minutes or even hours. If tests don\'t run quickly like in most end-to-end frameworks, engineers don\'t run them at all or don\'t bother writing them in the first place.\\n- **Debugging:** It\'s easy to step into the code of an integration test in JS instead of trying to recreate the screenshot test scenario and debugging what happened in the visual diff.\\n\\nBecause we believe snapshot testing can be useful beyond Jest we split the feature into a [jest-snapshot](https://github.com/jestjs/jest/tree/main/packages/jest-snapshot) package. We are happy to work with the community to make it more generic so it can be integrated with other test runners and share concepts and infrastructure with each other.\\n\\nFinally, here is a quote of a Facebook engineer describing how snapshot testing changed his unit testing experience:\\n\\n> \u201cOne of the most challenging aspects of my project was keeping the input and output files for each test case in sync. Each little change in functionality could cause all the output files to change. With snapshot testing I do not need the output files, the snapshots are generated for free by Jest! I can simply inspect how Jest updates the snapshots rather than making the changes manually.\u201d \u2013 [Kyle Davis](https://github.com/kyldvs) working on [fjs](https://github.com/kyldvs/fjs).\\n\\n## What\'s next for Jest\\n\\nRecently [Aaron Abramov](https://twitter.com/aarondjents) has joined the Jest team full time to improve our unit and integration test infrastructure for Facebook\'s ads products. For the next few months the Jest team is planning major improvements in these areas:\\n\\n- **Replace Jasmine:** Jasmine is slowing us down and is not being very actively developed. We started replacing all the Jasmine matchers and are excited to add new features and drop this dependency.\\n- **Code Coverage:** When Jest was originally created, tools such as babel didn\'t exist. Our code coverage support has a bunch of edge cases and isn\'t always working properly. We are rewriting it to address all the current problems with coverage.\\n- **Developer Experience:** This ranges from improving the setup process, the debugging experience to CLI improvements and more documentation.\\n- **Mocking:** The mocking system, especially around manual mocks, is not working well and is confusing. We hope to make it more strict and easier to understand.\\n- **Performance:** Further performance improvements especially for really large codebases are being worked on.\\n\\nAs always, if you have questions or if you are excited to help out, please reach out to us!"},{"id":"/2016/06/22/jest-13","metadata":{"permalink":"/ro/blog/2016/06/22/jest-13","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2016-06-22-jest-13.md","source":"@site/blog/2016-06-22-jest-13.md","title":"Jest 13.0: Flow & REPL","description":"Today we are happy to announce the next major release of Jest. We have made major changes to Jest which are going to benefit you and all of Facebook\'s JavaScript test infrastructure. Most importantly, we added static types to all of Jest\'s code during a recent Jest hackathon at Facebook. Fifteen people worked for a day and night to add Flow types to Jest and to add new features to Jest. The Flow types serve two purposes: First, we believe that code is written to be read. Most of the time, code is written only once but read by dozens of people over the course of years. Adding static types to the project helps document the code and helps explain some of the architecture in Jest. Second, adding static types makes maintenance easier and will allow us to more confidently refactor parts of Jest without fear of breakages.","date":"2016-06-22T00:00:00.000Z","tags":[],"readingTime":2.565,"hasTruncateMarker":true,"authors":[{"name":"Christoph Nakazawa","url":"https://github.com/cpojer","socials":{"github":"https://github.com/cpojer","x":"https://x.com/cpojer"},"imageURL":"https://github.com/cpojer.png","key":"cpojer","page":null}],"frontMatter":{"title":"Jest 13.0: Flow & REPL","authors":"cpojer"},"unlisted":false,"prevItem":{"title":"Jest 14.0: React Tree Snapshot Testing","permalink":"/ro/blog/2016/07/27/jest-14"},"nextItem":{"title":"Jest 11.0","permalink":"/ro/blog/2016/04/12/jest-11"}},"content":"Today we are happy to announce the next major release of Jest. We have made major changes to Jest which are going to benefit you and all of Facebook\'s JavaScript test infrastructure. Most importantly, we added static types to all of Jest\'s code during a recent Jest hackathon at Facebook. Fifteen people worked for a day and night to add [Flow](https://flowtype.org/) types to Jest and to add new features to Jest. The Flow types serve two purposes: First, we believe that code is written to be read. Most of the time, code is written only once but read by dozens of people over the course of years. Adding static types to the project helps document the code and helps explain some of the architecture in Jest. Second, adding static types makes maintenance easier and will allow us to more confidently refactor parts of Jest without fear of breakages.\\n\\nThe Flow project has evolved a lot within Facebook and has been successfully adopted across many of our frameworks and almost all of our product code. Adoption can be parallelized incredibly well \u2013 it can be done file-by-file until enough of the codebase is well-typed. Then, Flow provides real value and helps guide through large changes. Through this, many small edge cases and bugs were found.\\n\\n\x3c!--truncate--\x3e\\n\\nWith the help of [lerna](https://github.com/lerna/lerna), we continued to modularize the Jest project. With just a small [update to the configuration](https://github.com/lerna/lerna#lernajson), Flow and lerna now get along well with each other. Splitting up Jest into packages helped us rethink module boundaries and enabled us to ship useful [packages](https://github.com/jestjs/jest/tree/main/packages) standalone: The `jest-runtime` and `jest-repl` cli tools now allow you to run scripts in a sandboxed Jest environment, enabling you to run and debug your app from the command line. This is especially helpful for projects that use Facebook\'s `@providesModule` module convention. To get started, just install `jest-repl` and run it in the same folder you normally run your tests in! We also published a `jest-changed-files` package that finds changed files in version control for either git or hg, a common thing in developer tools.\\n\\n## New and improved features\\n\\n- Added a notification plugin that shows a test run notification when using `--notify`.\\n- Added a `browser` config option to properly resolve npm packages with a browser field in `package.json` if you are writing tests for client side apps.\\n- Improved \u201cno tests found message\u201d which will now report which tests were found and how they were filtered.\\n- Added `jest.isMockFunction(jest.fn())` to test for mock functions.\\n- Improved test reporter printing and added a test failure summary when running many tests.\\n- Added support for mocking virtual modules through `jest.mock(\'Module\', implementation, {virtual: true})`.\\n- Removed the `.haste_cache` folder. Jest now uses the operating system\'s preferred temporary file location.\\n- Added the duration of individual tests in verbose mode.\\n- Added the ability to record snapshots in Jest. We\'ll be publishing a separate blog post about this feature soon.\\n\\nFinally, we have received a complete website redesign done by Matthew Johnston and added documentation for using [Jest with webpack](/docs/webpack). Happy Jesting!"},{"id":"/2016/04/12/jest-11","metadata":{"permalink":"/ro/blog/2016/04/12/jest-11","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2016-04-12-jest-11.md","source":"@site/blog/2016-04-12-jest-11.md","title":"Jest 11.0","description":"Today we\'re announcing a switch to major revisions for Jest with Jest 11.0 being the first major release. Jest has been used by Facebook engineers and on our continuous integration systems for years and we believe Jest has been way beyond a \u201c1.0 release\u201d for a long time. This is similar to a change the React team has made.","date":"2016-04-12T00:00:00.000Z","tags":[],"readingTime":4.145,"hasTruncateMarker":true,"authors":[{"name":"Christoph Nakazawa","url":"https://github.com/cpojer","socials":{"github":"https://github.com/cpojer","x":"https://x.com/cpojer"},"imageURL":"https://github.com/cpojer.png","key":"cpojer","page":null}],"frontMatter":{"title":"Jest 11.0","authors":"cpojer"},"unlisted":false,"prevItem":{"title":"Jest 13.0: Flow & REPL","permalink":"/ro/blog/2016/06/22/jest-13"},"nextItem":{"title":"javascript-unit-testing-performance","permalink":"/ro/blog/2016/03/11/javascript-unit-testing-performance"}},"content":"Today we\'re announcing a switch to major revisions for Jest with Jest 11.0 being the first major release. Jest has been used by Facebook engineers and on our continuous integration systems for years and we believe Jest has been way beyond a \u201c1.0 release\u201d for a long time. This is similar to a change [the React team has made](http://facebook.github.io/react/blog/2016/02/19/new-versioning-scheme.html).\\n\\nIf you are using Jest 0.9 or Jest 0.10 the upgrade should be seamless. All changes from the last few months were rolled into Jest 11.0.\\n\\n### New in Jest 11.0\\n\\n#### Babel Integration and Simplified Setup\\n\\n`babel-jest` was adopted within the newly modularized Jest [repository](https://github.com/jestjs/jest/tree/main/packages) and it is now seamlessly integrated into Jest. If you are upgrading from an older version of Jest or are looking to adopt Jest, we recommend reading the [Getting Started guide](/docs/getting-started).\\n\\n\x3c!--truncate--\x3e\\n\\nPreviously Jest provided APIs such as `jest.dontMock` which unmocks a module that is subsequently being required using the `require` function. Testing code usually looked like this:\\n\\n```javascript\\njest.dontMock(\'LikeButton\');\\nconst LikeButton = require(\'LikeButton\'); // LikeButton is unmocked\\n```\\n\\nHowever, together with ES2015 import statements this will no longer work. Per the specification `import`s are hoisted to the top of their code block. Code written like this:\\n\\n```javascript\\njest.dontMock(\'LikeButton\');\\nimport LikeButton from \'LikeButton\';\\n```\\n\\nwhen executed, would actually be run in this order:\\n\\n```javascript\\nimport LikeButton from \'LikeButton\'; // This happens before the dontMock call.\\njest.dontMock(\'LikeButton\');\\n```\\n\\nThe LikeButton module would therefore be mocked even though we explicitly call `dontMock`.\\n\\nWhen the latest versions of Jest and babel-jest are used together, calls to the new APIs `jest.unmock`, `jest.mock`, `jest.disableAutomock` and `jest.enableAutomock` are hoisted to the top of their block, before ES2015 import statements.\\n\\n```javascript\\njest.unmock(\'LikeButton\');\\nimport LikeButton from \'LikeButton\'; // LikeButton is properly unmocked!\\n```\\n\\n#### (Auto)Mocking Improvements\\n\\nWe have made numerous improvements and bug fixes to Jest\'s automocking feature, improved npm3 support and added new manual mocking APIs. Many people have expressed a desire use Jest with the automocking feature disabled. A global configuration option [`automock`](/docs/api#automock-boolean), which can be set to `false`, was added.\\n\\nWe have also added two new APIs to simplify manual mocks. `jest.mock` specifies a manual mock factory for a specific test:\\n\\n```js\\n// Implement a mock for a hypothetical \\"sum\\" module.\\njest.mock(\'sum\', () => {\\n  return (a, b) => a + b;\\n});\\n\\nconst sum = require(\'sum\');\\nsum(1, 4); // 5\\n```\\n\\nAnd `jest.fn` was added to make it easier to create mock functions:\\n\\n```js\\n// Create a mock function\\nconst mockFn = jest.fn(() => 42);\\nmockFn(); // 42\\nexpect(mockFn.calls.length).toBe(1);\\n```\\n\\n#### Performance\\n\\nWe recently wrote about some [performance improvements](/blog/2016/03/11/javascript-unit-testing-performance) we\'ve made in Jest. Most notably, startup time has been improved and we are now in a comfortable place with regards to performance.\\n\\n#### Jasmine and Test Assertion Improvements\\n\\nWhen Jest was open sourced it shipped with Jasmine 1. Jest was designed to work with any test assertion library and optional Jasmine 2 support was added through an [external contribution](https://github.com/jestjs/jest/pull/330) at the end of last year. This change delivers better performance and provides a better APIs over the previous version of Jasmine. As such, we have converted all our JavaScript tests at Facebook to Jasmine 2. With Jest 11 we are making Jasmine 2 the new default. Jasmine 1 can be enabled through the [`testRunner`](/docs/api#testrunner-string) configuration option.\\n\\nWe have also made many updates around Jasmine. The failure messages for custom matchers provided for Jest\'s mock functions were improved and will now also work for Jasmine spies. Skipped tests, when using `fit` or `fdescribe,` are now properly reported at the end of a test run.\\n\\n#### Other Changes\\n\\nThe `jest --watch` command has been rewritten and improved. By default it now only runs tests related to changed files. If you want to run all tests on every change, you can run `jest --watch=all`. The verbose logger output has also been improved and we\'ve added more helpful warnings and error messages. We added a [`testEnvironment`](/docs/api#testenvironment-string) configuration option to customize the test environment. For example, when building a node service, a special `node` environment instead of `jsdom` can be used. Finally, the website and all documentation have been completely rewritten.\\n\\nAll changes from the past few months can be found in the [CHANGELOG](https://github.com/jestjs/jest/blob/main/CHANGELOG.md).\\n\\n### Contributions And Jest\'s future\\n\\nOver the last six months, Jest has received significant changes from a huge number of new contributors. I\'d like to thank all the open source contributors and Facebook employees for their help in making Jest better for everyone. New contributors: Alexander Juarez, Christian Lentfort, Cristian Carlesso, Dan Abramov, Dmitrii Abramov, Evan Jacobs, James Friend, James Ide, Jeff Carpenter, Joe Lencioni, Michael Diolosa, Nik Graf, Pavel Prokopenko, Pavel Volokitin, Sebastian Mayr and ShihChi Huang.\\n\\nWith your support we are looking forward to making Jest even better in the coming months. We are currently working on improved React (Native) testing, enhanced code coverage support and are planning to open source our internal test runner that allows multiple Jest projects to be run with a single run-command."},{"id":"/2016/03/11/javascript-unit-testing-performance","metadata":{"permalink":"/ro/blog/2016/03/11/javascript-unit-testing-performance","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2016-03-11-javascript-unit-testing-performance.md","source":"@site/blog/2016-03-11-javascript-unit-testing-performance.md","title":"javascript-unit-testing-performance","description":"Jest is running thousands of tests at Facebook at all times, either through continuous integration or invoked by engineers manually during development. This worked well for years even as the people working on Jest moved on to other projects within Facebook.","date":"2016-03-11T00:00:00.000Z","tags":[],"readingTime":9.875,"hasTruncateMarker":true,"authors":[{"name":"Christoph Nakazawa","url":"https://github.com/cpojer","socials":{"github":"https://github.com/cpojer","x":"https://x.com/cpojer"},"imageURL":"https://github.com/cpojer.png","key":"cpojer","page":null}],"frontMatter":{"authors":"cpojer"},"unlisted":false,"prevItem":{"title":"Jest 11.0","permalink":"/ro/blog/2016/04/12/jest-11"}},"content":"Jest is running thousands of tests at Facebook at all times, either through continuous integration or invoked by engineers manually during development. This worked well for years even as the people working on Jest moved on to other projects within Facebook.\\n\\nAs engineers added more and more tests though, we noticed the performance of Jest wasn\'t going to scale. Additionally, in the last year the JavaScript ecosystem has changed dramatically with the introduction of things like npm3 and Babel, which we hadn\'t anticipated. We formed a new Jest team to address all of these issues and we\'ll be sharing our progress and plans on this blog from now on.\\n\\n\x3c!--truncate--\x3e\\n\\nJest is a bit different from most test runners. We designed it to work well in the context of Facebook\'s infrastructure:\\n\\n- **Monorepo** At Facebook we have a huge monorepo that contains all of our JavaScript code. There are many reasons why this approach is advantageous for us and there is an [awesome talk](https://www.youtube.com/watch?v=W71BTkUbdqE) by a Google engineer that highlights all the benefits and drawbacks of monorepos.\\n- **Sandboxing** Another feature of Jest that\'s important to Facebook is how it virtualizes the test environment and wraps `require` in order to sandbox code execution and isolate individual tests. We\'re even working on making Jest more modular so we can take advantage of this functionality in other non-testing related use cases.\\n- **providesModule** If you\'ve looked at any of our open source JavaScript projects before, you may have noticed that we use a `@providesModule` header to assign globally unique IDs to modules. This does require some custom tooling, but it allows us to reference modules without relative paths which has helped us move incredibly fast, has scaled well as our engineering organization has grown, and has fostered code sharing across the entire company. Check out [RelayContainer](https://github.com/facebook/relay/blob/4eae620d86ed7fce1ee463c2fca88eb690d9cbde/src/container/RelayContainer.js#L9) for an example of how this works in practice. One downside to this approach, though, is that we\'re forced to read and parse our entire JavaScript codebase in order to resolve a single require statement. This would obviously be prohibitively expensive without extensive caching, especially for a short-lived process like Jest.\\n\\nAs a result of these unique constraints, Jest may never be able to be as fast as other test runners when running on our entire suite of tests. However, engineers rarely need to run Jest on our entire test suite. Powered by static analysis in the [node-haste](https://github.com/facebook/node-haste) project \u2013 we\'ve been able to make the default mode for running Jest at Facebook `jest --onlyChanged`, or `jest -o`. In this mode we build a reverse dependency graph to find only the affected tests that need to be run based on the modules that have been changed.\\n\\n## Optimal Scheduling of a Test Run\\n\\nMost of the time our static analysis determines that more than one test needs to be run. The number of affected tests can be anywhere from a couple of tests to thousands. In order to speed this process up Jest parallelizes test runs across workers. This is great because most of Facebook\'s development happens on remote servers with many CPU cores.\\n\\nRecently we noticed Jest often seemed stuck _\u201cWaiting for 3 tests\u201d_ for up to a minute toward the end of a run. It turned out we had a few really slow tests in our codebase that were dominating the test runtime. While we were able to speed these individual tests up significantly, we also made a change in how Jest schedules test runs. Previously we used to schedule test runs based on file system traversal, which was actually quite random. Here is an example of 11 tests in gray blocks over two workers. The size of the block is the runtime of the test:\\n\\n![perf-basic-scheduling](/img/blog/Scheduling1.png)\\n\\nWe were randomly running a mix of fast and slow tests, and one of our slowest tests ended up running as almost all the other tests were completed, during which the second worker sat idle.\\n\\nWe made a change to schedule tests based on their file size which is usually a good proxy for how long a test is going to take. A test with a few thousand lines of code likely takes longer than a test with 15 lines of code. While this sped up the entire test run by about 10%, we ended up finding a better heuristic: now Jest stores the runtime of each test in a cache and on subsequent runs, it schedules the slowest tests to run first. Overall this helped improve the runtime of all tests by about 20%.\\n\\nHere is an example of the same test run from before with better scheduling:\\n\\n![perf-improved-scheduling](/img/blog/Scheduling2.png)\\n\\nBecause we are running slow tests first, Jest can sometimes seem to take a long time to start up \u2013 we only print results after the first test has completed. For the future we are planning to run previously failed tests first, because getting that info to developers as quickly as possible matters the most.\\n\\n## Inline Requires and Lazy Mocking\\n\\nIf you have written tests using Jasmine before, they probably look like this:\\n\\n```js\\nconst sum = require(\'sum\');\\ndescribe(\'sum\', () => {\\n  it(\'works\', () => {\\n    expect(sum(5, 4)).toBe(9);\\n  });\\n});\\n```\\n\\nOne special thing we do in Jest is reset the entire module registry after every single test (call to `it`) to make sure tests don\'t depend on each other. Before Jest, individual tests would depend on each other and internal module state often leaked between them. As engineers removed, reordered or refactored tests, some of them started to fail, making it hard for people to understand what was going on.\\n\\nEvery single test in Jest receives a fresh new copy of all modules, including new versions of all mocked dependencies which take a lot of time to generate for each test. A side effect of this is that we had to call `require` manually before every test, like this:\\n\\n```js\\nlet sum;\\ndescribe(\'sum\', () => {\\n  beforeEach(() => {\\n    sum = require(\'sum\');\\n  });\\n  it(\'works\', () => {\\n    expect(sum(5, 4)).toBe(9);\\n  });\\n  it(\'works too\', () => {\\n    // This copy of sum is not the same as in the previous call to `it`.\\n    expect(sum(2, 3)).toBe(5);\\n  });\\n});\\n```\\n\\nWe built a babel transform called [inline-requires](https://github.com/facebook/fbjs/blob/main/packages/babel-preset-fbjs/plugins/inline-requires.js) that removes top-level require statements and inlines them in code. For example, the line `const sum = require(\'sum\');` will be removed from code, but every use of `sum` in the file will be replaced by `require(\'sum\')`. With this transform we can write tests just like you\'d expect in Jasmine and the code gets transformed into this:\\n\\n```js\\ndescribe(\'sum\', () => {\\n  it(\'works\', () => {\\n    expect(require(\'sum\')(5, 4)).toBe(9);\\n  });\\n});\\n```\\n\\nA great side-effect of inline requires is that we only require the modules that we actually use within the test itself, instead of all the modules we used in the entire file.\\n\\nWhich leads to another optimization: lazy mocking. The idea is to only mock modules on demand, which combined with inline requires saves us from mocking a lot of modules and all their recursive dependencies.\\n\\nWe were able to update all tests using a [codemod](https://github.com/cpojer/js-codemod/blob/master/transforms/outline-require.js) in no time \u2013 it was a _simple_ 50,000 line code change. Inline requires and lazy mocking improved the test runtime by 50%.\\n\\nThe inline-require babel plugin is not only useful for Jest but for normal JavaScript as well. It was shipped by [Bhuwan](https://twitter.com/voideanvalue) to all users of [facebook.com](http://facebook.com/) just a week ago and significantly improved startup time.\\n\\nFor now, if you\'d like to use this transform in Jest you\'ll have to add it manually to your Babel configuration. We are working on ways to make this easier to opt-in.\\n\\n## Repo-Sync and Caching\\n\\nThe open source version of Jest used to be a fork of our internal version, and we\'d sync Jest out only once every couple of months. This was a painful manual process that required fixing up many tests every time. We recently upgraded Jest and brought parity to all platforms (iOS, Android and web) and then enabled our sync process. Now, every change to Jest in open source is run against all of our internal tests, and there\'s only a single version of Jest that\'s consistent everywhere.\\n\\nThe first feature we got to take advantage of after unforking was the preprocessor cache. If you are using Babel together with Jest, Jest has to pre-process every JavaScript file before it can execute it. We built a caching layer so that each file, when unchanged, only has to be transformed a single time. After we unforked Jest, we were able to easily fix up the open source implementation and shipped it at Facebook. This resulted in another 50% performance win. Because the cache only works on the second-run, the cold start time of Jest was unaffected.\\n\\nWe also realized we were doing a lot of path operations when resolving relative requires. Because the module registry is reset for every test, there were thousands of calls that could be memoized. One big optimization was to add a lot more caching, not just around a single test, but also across test files. Previously, we would generate module metadata for the automocking feature once for every test file. The object a module exports never changes however, so we now share this code across test files. Unfortunately, because JavaScript and Node.js don\'t have shared memory, we have to do all of this work at least once per worker process.\\n\\n## Question Everything\\n\\nWhen trying to improve performance, it\'s important to also dive into the systems that sit above and below your system. In the case of Jest, things like Node.js and the test files themselves, for example. One of the first things we did was to update Node.js at Facebook from the years-old 0.10 to iojs and subsequently to Node 4. The new version of V8 helped improve performance and was quite easy to upgrade to.\\n\\nWe noticed that the `path` module in Node.js is slow when making thousands of path operations which was [fixed in Node 5.7](https://github.com/nodejs/node/pull/5123). Until we drop support for Node 4 internally at Facebook, we\'ll ship our own version of the [fastpath](https://github.com/facebook/node-haste/blob/master/src/fastpath.js) module.\\n\\nWe next started questioning the outdated [node-haste](https://github.com/facebook/node-haste). As mentioned before, the entire project has to be parsed for `@providesModule` headers to build a dependency graph. When this system was originally built, `node_modules` didn\'t exist and our file system crawler wasn\'t excluding them properly.\\n\\nIn previous versions, Jest would actually read every file in `node_modules` \u2013 which contributed to the slow startup time of Jest. When we picked up Jest again we replaced the entire project with a new implementation, based on react-native\'s packager. The startup time of Jest is now less than a second even on large projects. The react-native team, specifically [David](https://twitter.com/void_0), [Amjad](https://twitter.com/amasad) and [Martin](https://twitter.com/martinbigio) did an outstanding job on this project.\\n\\n## Adding everything up\\n\\nA lot of the above changes improved the test runtime by 10% or sometimes even 50%. We started at a runtime of about 10 minutes for all tests, and without these improvements we\'d probably be at around 20 minutes by now. After these improvements, though, it now consistently takes around 1 minute and 35 seconds to run all our tests!\\n\\nMore importantly, adding new tests causes total runtime to grow very slowly. Engineers can write and run more tests without feeling the costs.\\n\\nWith Jest\'s recent 0.9 release and performance improvements from the [node-haste2 integration](https://github.com/jestjs/jest/pull/599), the runtime of the [Relay](https://github.com/facebook/relay) framework\'s test suite went down from 60 seconds to about 25 and the [react-native](https://github.com/facebook/react-native) test suite now finishes in less than ten seconds on a 13\u201d MacBook Pro.\\n\\nWe\'re very happy with the wins we\'ve seen so far, and we\'re going to keep working on Jest and making it better. If you are curious about contributing to Jest, feel free get in touch on GitHub, [Discord](https://discord.gg/j6FKKQQrW9) or Facebook :)"}]}}')}}]);