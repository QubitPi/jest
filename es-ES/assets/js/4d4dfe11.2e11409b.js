"use strict";(self.webpackChunkjest_website=self.webpackChunkjest_website||[]).push([[5726],{55913:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>r,metadata:()=>n,toc:()=>h});var n=t(75070),i=t(62540),o=t(43023);const r={title:"Jest 28: Shedding weight and improving compatibility \ud83e\udef6",authors:"simenb"},a=void 0,l={authorsImageUrls:[void 0]},h=[{value:"Breaking changes",id:"breaking-changes",level:2},{value:"Features",id:"features",level:2},{value:"Sharding of test run",id:"sharding-of-test-run",level:3},{value:"<code>package.json</code> <code>exports</code>",id:"packagejson-exports",level:3},{value:"Fake timers",id:"fake-timers",level:3},{value:"GitHub Actions Reporter",id:"github-actions-reporter",level:3},{value:"Inline <code>testEnvironmentOptions</code>",id:"inline-testenvironmentoptions",level:3},{value:"All Node.js globals",id:"all-nodejs-globals",level:3},{value:"ECMAScript Modules",id:"ecmascript-modules",level:3},{value:"<code>data:</code> URLs",id:"data-urls",level:4},{value:"<code>import.meta.jest</code>",id:"importmetajest",level:4},{value:"Miscellaneous",id:"miscellaneous",level:3},{value:"Asynchronous resolvers",id:"asynchronous-resolvers",level:4},{value:"Asynchronous setup files",id:"asynchronous-setup-files",level:4},{value:"Using <code>globalThis</code>",id:"using-globalthis",level:4},{value:"JSDOM 19",id:"jsdom-19",level:4},{value:"TypeScript",id:"typescript",level:2},{value:"<code>expect</code>",id:"expect",level:3},{value:"Custom plugins",id:"custom-plugins",level:3},{value:"<code>jest-runner-tsd</code>",id:"jest-runner-tsd",level:3},{value:"<code>jest-light-runner</code>",id:"jest-light-runner",level:2},{value:"Future",id:"future",level:2},{value:"Acknowledgements",id:"acknowledgements",level:2}];function d(e){const s={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",hr:"hr",img:"img",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(s.p,{children:["Jest 28 is finally here, and it comes with some long requested features such as support for ",(0,i.jsx)(s.a,{href:"/docs/cli#--shard",children:"sharding"})," a test run across multiple machines, ",(0,i.jsxs)(s.a,{href:"https://nodejs.org/api/packages.html#exports",children:["package ",(0,i.jsx)(s.code,{children:"exports"})]})," and the ability to customize the behavior of ",(0,i.jsx)(s.a,{href:"/docs/jest-object#fake-timers",children:"fake timers"}),". These are just some personal highlights, and we'll be highlighting more in this blog post."]}),"\n",(0,i.jsxs)(s.p,{children:["Additionally, as announced in the ",(0,i.jsx)(s.a,{href:"/blog/2021/05/25/jest-27",children:"Jest 27 blog post"})," last year, we have removed some packages that no longer are used by default from the default installation. As a result the installation size has dropped by about 1/3."]}),"\n",(0,i.jsx)(s.h2,{id:"breaking-changes",children:"Breaking changes"}),"\n",(0,i.jsxs)(s.p,{children:["The list of breaking changes is long (and can be seen fully in the ",(0,i.jsx)(s.a,{href:"https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2800",children:"changelog"}),"), but for migration purposes, we've also written ",(0,i.jsx)(s.a,{href:"/docs/28.x/upgrading-to-jest28",children:"a guide"})," you can follow. Hopefully this makes the upgrade experience as frictionless as possible!"]}),"\n",(0,i.jsxs)(s.p,{children:["Main breaking changes likely to impact your migration are dropped support for Node 10 and 15 (but ",(0,i.jsx)(s.em,{children:"not"})," Node 12, which will be EOL in a few days) and some renamed configuration options."]}),"\n",(0,i.jsxs)(s.p,{children:["Please note that both of the removed modules (",(0,i.jsx)(s.code,{children:"jest-environment-jsdom"})," and ",(0,i.jsx)(s.code,{children:"jest-jasmine2"}),") are still actively maintained and tested in the same way, so the only breaking change here is that you'll need to explicitly install them."]}),"\n",(0,i.jsxs)(s.p,{children:["The guide should hopefully make migration trivial, but note that if you use any of the packages Jest consists of directly (such as ",(0,i.jsx)(s.code,{children:"jest-worker"})," or ",(0,i.jsx)(s.code,{children:"pretty-format"}),"), instead of just running ",(0,i.jsx)(s.code,{children:"jest"}),", then you need to go through the changelog to view any breaking changes."]}),"\n",(0,i.jsx)(s.h2,{id:"features",children:"Features"}),"\n",(0,i.jsx)(s.p,{children:"Now let's talk about the new features in Jest 28, which is way more exciting! And there's quite a few of them, so buckle up."}),"\n",(0,i.jsx)(s.h3,{id:"sharding-of-test-run",children:"Sharding of test run"}),"\n",(0,i.jsxs)(s.p,{children:["Jest now includes a new ",(0,i.jsx)(s.a,{href:"/docs/cli#--shard",children:(0,i.jsx)(s.code,{children:"--shard"})})," CLI option, contributed by ",(0,i.jsx)(s.a,{href:"https://github.com/marionebl",children:"Mario Nebl"}),". It allows you to run parts of your test across different machine, and has been one of Jest's oldest feature requests."]}),"\n",(0,i.jsx)(s.p,{children:"Jest's own test suite on CI went from about 10 minutes to 3 on Ubuntu, and on Windows from 20 minutes to 7."}),"\n",(0,i.jsxs)(s.h3,{id:"packagejson-exports",children:[(0,i.jsx)(s.code,{children:"package.json"})," ",(0,i.jsx)(s.code,{children:"exports"})]}),"\n",(0,i.jsxs)(s.p,{children:["Jest shipped minimal support of ",(0,i.jsx)(s.a,{href:"https://nodejs.org/api/packages.html#exports",children:(0,i.jsx)(s.code,{children:"exports"})}),' in 27.3. However, it only supported the "main" entry point (',(0,i.jsx)(s.code,{children:"."}),"), and only if no ",(0,i.jsx)(s.code,{children:"main"})," field was present in ",(0,i.jsx)(s.code,{children:"package.json"}),". With Jest 28 we're excited to finally be shipping full support!"]}),"\n",(0,i.jsxs)(s.p,{children:["Related, in Jest 27, we provided either ",(0,i.jsx)(s.code,{children:"require"})," or ",(0,i.jsx)(s.code,{children:"import"})," condition. In Jest 28, ",(0,i.jsx)(s.code,{children:"jest-environment-node"})," will now automatically provide ",(0,i.jsx)(s.code,{children:"node"})," and ",(0,i.jsx)(s.code,{children:"node-addons"})," conditions, while ",(0,i.jsx)(s.code,{children:"jest-environment-jsdom"})," will provide the ",(0,i.jsx)(s.code,{children:"browser"})," condition."]}),"\n",(0,i.jsx)(s.p,{children:"This has been one of the biggest compatibility issues of Jest, and hopefully this is now resolved once and for all."}),"\n",(0,i.jsx)(s.h3,{id:"fake-timers",children:"Fake timers"}),"\n",(0,i.jsxs)(s.p,{children:['Jest 26 introduced the concept of "modern" fake timers, which uses ',(0,i.jsx)(s.a,{href:"https://www.npmjs.com/package/@sinonjs/fake-timers",children:(0,i.jsx)(s.code,{children:"@sinonjs/fake-timers"})})," under the hood, and Jest 27 made it the default. In Jest 28, we are now exposing more of the underlying implementation through both configuration and runtime APIs. Huge thanks to ",(0,i.jsx)(s.a,{href:"https://github.com/mrazauskas",children:"Tom Mrazauskas"})," who contributed this feature!"]}),"\n",(0,i.jsxs)(s.p,{children:["This allows you to not mock out ",(0,i.jsx)(s.code,{children:"process.nextTick"})," which improves compatibility with fake ",(0,i.jsx)(s.code,{children:"Promise"}),"s, or to enable ",(0,i.jsx)(s.code,{children:"advanceTimers"})," which automatically advance timers."]}),"\n",(0,i.jsxs)(s.p,{children:["Please see ",(0,i.jsxs)(s.a,{href:"/docs/configuration#faketimers-object",children:["the ",(0,i.jsx)(s.code,{children:"fakeTimers"})," configuration"]})," for details."]}),"\n",(0,i.jsx)(s.h3,{id:"github-actions-reporter",children:"GitHub Actions Reporter"}),"\n",(0,i.jsx)(s.p,{children:"Jest now ships with a reporter to be used on GitHub Actions, which will use annotations to print test errors inline."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"GitHub Actions test error screenshot",src:t(23918).A+"",width:"2286",height:"554"})}),"\n",(0,i.jsxs)(s.p,{children:["You can activate this reporter by passing ",(0,i.jsx)(s.code,{children:"github-actions"})," in the ",(0,i.jsxs)(s.a,{href:"/docs/configuration#reporters-arraymodulename--modulename-options",children:[(0,i.jsx)(s.code,{children:"reporters"})," configuration option"]}),"."]}),"\n",(0,i.jsxs)(s.p,{children:["Huge thanks to ",(0,i.jsx)(s.a,{href:"https://github.com/ockham",children:"Bernie Reiter"})," and other contributors for sticking by us and finally landing this feature."]}),"\n",(0,i.jsxs)(s.h3,{id:"inline-testenvironmentoptions",children:["Inline ",(0,i.jsx)(s.code,{children:"testEnvironmentOptions"})]}),"\n",(0,i.jsxs)(s.p,{children:["You can now pass ",(0,i.jsx)(s.a,{href:"/docs/configuration#testenvironmentoptions-object",children:(0,i.jsx)(s.code,{children:"testEnvironmentOptions"})})," inline in a file, similar to how you can set test environment. This is useful if you want to e.g. change the URL in a single file."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-js",children:"/**\n * @jest-environment jsdom\n * @jest-environment-options {\"url\": \"https://jestjs.io/\"}\n */\n\ntest('use jsdom and set the URL in this test file', () => {\n  expect(window.location.href).toBe('https://jestjs.io/');\n});\n"})}),"\n",(0,i.jsx)(s.h3,{id:"all-nodejs-globals",children:"All Node.js globals"}),"\n",(0,i.jsxs)(s.p,{children:["If you are using the new ",(0,i.jsx)(s.a,{href:"https://nodejs.org/en/blog/announcements/v18-release-announce/#fetch-experimental",children:(0,i.jsx)(s.code,{children:"fetch"})})," implementation in Node v18, you might have noticed that this function is not available in Jest. It has been a long-standing issue that we have to manually copy over any globals into the test globals. With Jest 28, this is no longer an issue as we now inspect the global environment Jest itself is running in, and copy over any globals that are missing in the test environment."]}),"\n",(0,i.jsx)(s.h3,{id:"ecmascript-modules",children:"ECMAScript Modules"}),"\n",(0,i.jsxs)(s.p,{children:["Not much has changed in Jest's support for native ESM since Jest 27 came out. We continue to be blocked by ",(0,i.jsx)(s.a,{href:"https://github.com/nodejs/node/issues/37648",children:"stabilization in Node"}),", and are hopeful this situation will improve sooner rather than later!"]}),"\n",(0,i.jsx)(s.p,{children:"However, we have been able to add a couple of new features in Jest 28."}),"\n",(0,i.jsxs)(s.h4,{id:"data-urls",children:[(0,i.jsx)(s.code,{children:"data:"})," URLs"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://github.com/tbossi",children:"Tommaso Bossi"})," has contributed support for ",(0,i.jsxs)(s.a,{href:"https://nodejs.org/api/esm.html#data-imports",children:[(0,i.jsx)(s.code,{children:"data"})," URLs"]}),", meaning you can now inline define some JavaScript to run without using ",(0,i.jsx)(s.code,{children:"eval"}),"."]}),"\n",(0,i.jsx)(s.h4,{id:"importmetajest",children:(0,i.jsx)(s.code,{children:"import.meta.jest"})}),"\n",(0,i.jsxs)(s.p,{children:["While you have been able to access ",(0,i.jsx)(s.code,{children:"jest"})," via ",(0,i.jsx)(s.code,{children:"import {jest} from '@jest/globals'"})," in Jest, we've received feedback that this is less ergonomical than the (seemingly, but not really) global ",(0,i.jsx)(s.code,{children:"jest"})," variable available in CJS. So Jest 28 ships with ",(0,i.jsx)(s.code,{children:"import.meta.jest"})," to allow easier access."]}),"\n",(0,i.jsx)(s.h3,{id:"miscellaneous",children:"Miscellaneous"}),"\n",(0,i.jsx)(s.p,{children:"That's quite a lot of features, and are my personal highlights. However, we still have many more which I'll quickly go through:"}),"\n",(0,i.jsx)(s.h4,{id:"asynchronous-resolvers",children:"Asynchronous resolvers"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://github.com/IanVS",children:"Ian VanSchooten"})," has contributed support for ",(0,i.jsx)(s.a,{href:"/docs/configuration#resolver-string",children:"asynchronous resolvers"}),", which enables tools like ",(0,i.jsx)(s.a,{href:"https://vitejs.dev/",children:"Vite"})," to have better integrations with Jest."]}),"\n",(0,i.jsx)(s.h4,{id:"asynchronous-setup-files",children:"Asynchronous setup files"}),"\n",(0,i.jsxs)(s.p,{children:["If you have some async work you want to do when using ",(0,i.jsx)(s.code,{children:"setupFiles"}),", you can now export an ",(0,i.jsx)(s.code,{children:"async function"}),", which Jest will call and await before loading any tests."]}),"\n",(0,i.jsxs)(s.p,{children:["Note that this feature is only available for CJS. For ESM, we recommend using top-level ",(0,i.jsx)(s.code,{children:"await"})," instead."]}),"\n",(0,i.jsxs)(s.h4,{id:"using-globalthis",children:["Using ",(0,i.jsx)(s.code,{children:"globalThis"})]}),"\n",(0,i.jsxs)(s.p,{children:["Internally, Jest has been using ",(0,i.jsx)(s.code,{children:"global"})," to refer to the ",(0,i.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Glossary/Global_object",children:"global environment"}),". However, since this only exists in Node, and not browsers (",(0,i.jsx)(s.code,{children:"window"}),"), this led to incompatibility when attempting to use Jest's modules in another environment."]}),"\n",(0,i.jsxs)(s.p,{children:["Jest 28 uses ",(0,i.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis",children:(0,i.jsx)(s.code,{children:"globalThis"})})," instead, which works in all environments."]}),"\n",(0,i.jsx)(s.h4,{id:"jsdom-19",children:"JSDOM 19"}),"\n",(0,i.jsxs)(s.p,{children:["While, as mentioned, Jest no longer ships ",(0,i.jsx)(s.code,{children:"jest-environment-jsdom"})," in the default installation, it is still actively maintained. As part of that, Jest 28 has upgraded from ",(0,i.jsx)(s.code,{children:"jsdom@16"})," to ",(0,i.jsx)(s.code,{children:"jsdom@19"}),"."]}),"\n",(0,i.jsx)(s.h2,{id:"typescript",children:"TypeScript"}),"\n",(0,i.jsx)(s.p,{children:"If you use Jest with TypeScript, either in your tests or when writing plugins such as custom runners, Jest 28 comes with extensive improvements to our types. Here's a non-exhaustive list of the changes in Jest 28."}),"\n",(0,i.jsx)(s.h3,{id:"expect",children:(0,i.jsx)(s.code,{children:"expect"})}),"\n",(0,i.jsxs)(s.p,{children:["When using ",(0,i.jsx)(s.code,{children:"expect"}),"'s own types (either directly, or via ",(0,i.jsx)(s.code,{children:"import {expect} from '@jest/globals'"}),"), it's now finally possible to add custom matchers. See our ",(0,i.jsx)(s.a,{href:"https://github.com/jestjs/jest/tree/main/examples/expect-extend",children:"example"})," for how to do this."]}),"\n",(0,i.jsx)(s.h3,{id:"custom-plugins",children:"Custom plugins"}),"\n",(0,i.jsx)(s.p,{children:"If you write a custom runner, test reporter, resolver or something else, we now export more types that should help you type these more correctly. This is a moving target, so if you are the author of something pluggable in Jest and the types aren't as useful as they could be, please file an issue!"}),"\n",(0,i.jsx)(s.h3,{id:"jest-runner-tsd",children:(0,i.jsx)(s.code,{children:"jest-runner-tsd"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://github.com/jest-community/jest-runner-tsd",children:(0,i.jsx)(s.code,{children:"jest-runner-tsd"})})," is a custom runner for running type tests. This is what Jest uses itself to test our types, and we hope it can also be used by others! As its name implies, it is based on ",(0,i.jsx)(s.a,{href:"https://npmjs.com/package/tsd",children:(0,i.jsx)(s.code,{children:"tsd"})}),", although it under the hood uses the fork ",(0,i.jsx)(s.a,{href:"https://npmjs.com/package/tsd-lite",children:(0,i.jsx)(s.code,{children:"tsd-lite"})}),"."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsxs)(s.p,{children:["All of these improvements and fixes has been contributed by ",(0,i.jsx)(s.a,{href:"https://github.com/mrazauskas",children:"Tom Mrazauskas"}),". Thank you so much, Tom! \ud83d\udc4f"]}),"\n",(0,i.jsx)(s.p,{children:"Lastly, the minimum support version of TypeScript is now 4.3."}),"\n",(0,i.jsx)(s.h2,{id:"jest-light-runner",children:(0,i.jsx)(s.code,{children:"jest-light-runner"})}),"\n",(0,i.jsxs)(s.p,{children:["The last thing we want to highlight in this blog post, is a very cool new Jest runner, created by ",(0,i.jsx)(s.a,{href:"https://github.com/nicolo-ribaudo",children:"Nicol\xf2 Ribaudo"}),", called ",(0,i.jsx)(s.a,{href:"https://www.npmjs.com/package/jest-light-runner",children:(0,i.jsx)(s.code,{children:"jest-light-runner"})}),". This takes almost all of the DX Jest is known for, and speeds it way up by being a smaller abstraction on top of Node. Babel's tests became almost twice as fast after migrating. While there are caveats, the existence of this runner should make it even easier for people who have smaller Node modules to test to choose Jest. Thanks, Nicol\xf2!"]}),"\n",(0,i.jsx)(s.h2,{id:"future",children:"Future"}),"\n",(0,i.jsxs)(s.p,{children:["While Jest 28 came almost a year after Jest 27, Jest 29 will be coming sooner, probably in just a few months. The current plan then is to just have one breaking change (except dropping Node versions), and that is to default ",(0,i.jsx)(s.a,{href:"/docs/configuration#snapshotformat-object",children:(0,i.jsx)(s.code,{children:"snapshotFormat"})})," to ",(0,i.jsx)(s.code,{children:"{escapeString: false, printBasicPrototype: false}"}),". This makes snapshots both more readable and more copy-pasteable."]}),"\n",(0,i.jsx)(s.p,{children:"This will of course be possible to override if you don't want to change, but you can also use those options today if you don't want to wait!"}),"\n",(0,i.jsx)(s.h2,{id:"acknowledgements",children:"Acknowledgements"}),"\n",(0,i.jsxs)(s.p,{children:["Jest 28 contains contributions from more than 60 people, of which more than two thirds are first time contributors. Thank you so much to all contributors, old and new. Without you the project wouldn't be nearly as good as it is! I'd particularly like to thank ",(0,i.jsx)(s.a,{href:"https://github.com/mrazauskas",children:"Tom Mrazauskas"})," and ",(0,i.jsx)(s.a,{href:"https://github.com/F3n67u",children:"Feng Yu"})," for all their contributions, from code, to issue triaging to debugging, that made Jest 28 what it is. Thank you! \ud83d\ude4f"]}),"\n",(0,i.jsx)(s.p,{children:"Thanks for reading, and happy Jesting! \ud83c\udccf"})]})}function c(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},23918:(e,s,t)=>{t.d(s,{A:()=>n});const n=t.p+"assets/images/28-gh-actions-reporter-1ee03f15b770cc9e04bb15ad1a532e1d.png"},43023:(e,s,t)=>{t.d(s,{R:()=>r,x:()=>a});var n=t(63696);const i={},o=n.createContext(i);function r(e){const s=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(o.Provider,{value:s},e.children)}},75070:e=>{e.exports=JSON.parse('{"permalink":"/es-ES/blog/2022/04/25/jest-28","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2022-04-25-jest-28.md","source":"@site/blog/2022-04-25-jest-28.md","title":"Jest 28: Shedding weight and improving compatibility \ud83e\udef6","description":"Jest 28 is finally here, and it comes with some long requested features such as support for sharding a test run across multiple machines, package exports and the ability to customize the behavior of fake timers. These are just some personal highlights, and we\'ll be highlighting more in this blog post.","date":"2022-04-25T00:00:00.000Z","tags":[],"readingTime":7.335,"hasTruncateMarker":true,"authors":[{"name":"Simen Bekkhus","socials":{"github":"https://github.com/simenb","x":"https://x.com/sbekkhus"},"imageURL":"https://github.com/SimenB.png","key":"simenb","page":null}],"frontMatter":{"title":"Jest 28: Shedding weight and improving compatibility \ud83e\udef6","authors":"simenb"},"unlisted":false,"prevItem":{"title":"Jest joins OpenJS Foundation","permalink":"/es-ES/blog/2022/05/11/jest-joins-openjs"},"nextItem":{"title":"Jest 27: New Defaults for Jest, 2021 edition \u23e9","permalink":"/es-ES/blog/2021/05/25/jest-27"}}')}}]);