"use strict";(self.webpackChunkjest_website=self.webpackChunkjest_website||[]).push([[9785],{20624:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>h});var o=s(34116),n=s(62540),r=s(43023);const i={title:"Jest 14.0: React Tree Snapshot Testing",authors:"cpojer"},a=void 0,l={authorsImageUrls:[void 0]},h=[];function c(e){const t={a:"a",p:"p",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"One of Jest's philosophies is to provide an integrated \u201czero-configuration\u201d experience. We want to make it as frictionless as possible to write good tests that are useful. We observed that when engineers are provided with ready-to-use tools, they end up writing more tests, which in turn results in stable and healthy code bases."}),"\n",(0,n.jsxs)(t.p,{children:["One of the big open questions was how to write React tests efficiently. There are plenty of tools such as ",(0,n.jsx)(t.a,{href:"https://facebook.github.io/react/docs/test-utils.html",children:"ReactTestUtils"})," and ",(0,n.jsx)(t.a,{href:"https://enzymejs.github.io/enzyme/",children:"enzyme"}),". Both of these tools are great and are actively being used. However engineers frequently told us that they spend more time writing a test than the component itself. As a result many people stopped writing tests altogether which eventually led to instabilities. Engineers told us all they wanted was to make sure their components don't change unexpectedly."]})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},43023:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>a});var o=s(63696);const n={},r=o.createContext(n);function i(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),o.createElement(r.Provider,{value:t},e.children)}},34116:e=>{e.exports=JSON.parse('{"permalink":"/pt-BR/blog/2016/07/27/jest-14","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2016-07-27-jest-14.md","source":"@site/blog/2016-07-27-jest-14.md","title":"Jest 14.0: React Tree Snapshot Testing","description":"One of Jest\'s philosophies is to provide an integrated \u201czero-configuration\u201d experience. We want to make it as frictionless as possible to write good tests that are useful. We observed that when engineers are provided with ready-to-use tools, they end up writing more tests, which in turn results in stable and healthy code bases.","date":"2016-07-27T00:00:00.000Z","tags":[],"readingTime":5.355,"hasTruncateMarker":true,"authors":[{"name":"Christoph Nakazawa","url":"https://github.com/cpojer","socials":{"github":"https://github.com/cpojer","x":"https://x.com/cpojer"},"imageURL":"https://github.com/cpojer.png","key":"cpojer","page":null}],"frontMatter":{"title":"Jest 14.0: React Tree Snapshot Testing","authors":"cpojer"},"unlisted":false,"prevItem":{"title":"Jest 15.0: New Defaults for Jest","permalink":"/pt-BR/blog/2016/09/01/jest-15"},"nextItem":{"title":"Jest 13.0: Flow & REPL","permalink":"/pt-BR/blog/2016/06/22/jest-13"}}')}}]);