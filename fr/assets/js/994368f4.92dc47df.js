"use strict";(self.webpackChunkjest_website=self.webpackChunkjest_website||[]).push([[3494],{2250:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>n,toc:()=>c});var n=t(5137),i=t(2540),o=t(3023);const r={title:"Jest 26: Tick Tock",authors:"cpojer"},a=void 0,l={authorsImageUrls:[void 0]},c=[{value:"New fake timers",id:"new-fake-timers",level:2},{value:"A new way to consume Jest - <code>@jest/globals</code>",id:"a-new-way-to-consume-jest---jestglobals",level:2},{value:"Native ESM support",id:"native-esm-support",level:2},{value:"Other Breaking Changes in Jest 26",id:"other-breaking-changes-in-jest-26",level:2},{value:"Stay Safe",id:"stay-safe",level:2}];function d(e){const s={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(s.p,{children:["When we started rebuilding Jest five years ago our goal was to provide a batteries-included zero-configuration test runner that is approachable for beginners, extensible for almost all testing use cases and scalable to large projects. One of the instrumental releases was ",(0,i.jsx)(s.a,{href:"/blog/2016/09/01/jest-15",children:"Jest 15"})," which tied everything together and provided good defaults that allowed people to run Jest often without any setup. However, this approach has a big downside as Jest installs a lot of dependencies into your projects that you may not need."]}),"\n",(0,i.jsxs)(s.p,{children:["We are now beginning to address this shortcoming and are working on reducing Jest\u2019s install size while keeping it approachable and extensible. We have made the following ",(0,i.jsx)(s.strong,{children:"breaking changes"})," in Jest 26:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"[expect, jest-mock, pretty-format]"})," Remove ",(0,i.jsx)(s.code,{children:"ES5"})," build files with a new minimum of support of ES2015 (Node 8) which were only used for browser builds (",(0,i.jsx)(s.a,{href:"https://github.com/jestjs/jest/pull/9945",children:"#9945"}),")"]}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Migration"}),": With this change, we are pushing the responsibility to bundle the affected packages to the users, rather than Jest providing them out of the box, since they know their target environments best. If you want it back, we're open to shipping these as separate packages. PRs welcome!"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"[jest-config, jest-resolve]"})," Remove support for ",(0,i.jsx)(s.code,{children:"browser"})," field (",(0,i.jsx)(s.a,{href:"https://github.com/jestjs/jest/pull/9943",children:"#9943"}),")"]}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Migration"}),": Install ",(0,i.jsx)(s.code,{children:"browser-resolve"})," module and use the following configuration:"]}),"\n"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'{\n  "jest": {\n    "resolver": "<rootDir>/resolver.js"\n  }\n}\n'})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-js",children:"// resolver.js\nconst browserResolve = require('browser-resolve');\n\nmodule.exports = browserResolve.sync;\n"})}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:["TypeScript definitions requires a minimum of TypeScript v3.8 (",(0,i.jsx)(s.a,{href:"https://github.com/jestjs/jest/pull/9823",children:"#9823"}),")"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"With the above changes Jest 26 is now 4 MiB smaller than Jest 25.5.4 (53 \u2192 49 MiB). Please keep in mind that many dependencies like Babel are likely already part of your project. Jest's own size was reduced by 1.2 MiB (4.3 -> 3.1 MiB)."}),"\n",(0,i.jsxs)(s.p,{children:["While this is a good start, it isn\u2019t enough to make Jest meaningfully leaner. We are planning on gradually reducing Jest's and its dependency tree size by up to 70%. Most of the changes to reduce Jest\u2019s default setup will be small breaking changes and we want to bring the community with us as much as possible. Therefore we will make the following changes in Jest 27 and Jest 28 using a ",(0,i.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Tick%E2%80%93tock_model",children:'\u201cTick-Tock" release process'}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:['Jest 27 will ship with a new test runner "',(0,i.jsx)(s.code,{children:"jest-circus"}),'" and the Node.js environment by default. ',(0,i.jsx)(s.code,{children:"jest-jasmine2"})," and ",(0,i.jsx)(s.code,{children:"jest-environment-jsdom"})," will still be bundled so users can keep using them by changing one-line each in the configuration."]}),"\n",(0,i.jsxs)(s.li,{children:["Jest 28 will remove ",(0,i.jsx)(s.code,{children:"jest-jasmine2"})," and ",(0,i.jsx)(s.code,{children:"jest-environment-jsdom"})," from the default distribution of Jest. The packages will still be actively maintained as part of the Jest project and be published separately. Users will need to install these packages to use them."]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"Upon upgrading to these major releases, Jest will guide you through the necessary changes. If you\u2019d like to get ahead and migrate to the new defaults now, and your project does not require a DOM environment, you can upgrade to Jest 26 and add the following configuration options:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'{\n  "jest": {\n    "testEnvironment": "node",\n    "testRunner": "jest-circus/runner"\n  }\n}\n'})}),"\n",(0,i.jsxs)(s.p,{children:["Jest will continue to ship with ",(0,i.jsx)(s.code,{children:"babel-jest"})," enabled by default. It currently powers a few Jest features beyond compiling modern JavaScript syntax to something understood by current versions of Node.js and browsers: It also powers Jest's code coverage and mocking of ES modules. Jest currently ships with experimental support for ",(0,i.jsx)(s.a,{href:"/blog/2020/01/21/jest-25#v8-code-coverage",children:"V8 coverage"})," and native support for ES Modules (more on that below!). It is not possible to mock static ES Modules per the specification without transforming the code first, so we will be encouraging patterns that work without the transformation we use Babel for today. Once V8 coverage and native ESM support stabilizes in Jest, we will also be able remove ",(0,i.jsx)(s.code,{children:"babel-jest"})," as a default but we will keep maintaining it."]}),"\n",(0,i.jsx)(s.h2,{id:"new-fake-timers",children:"New fake timers"}),"\n",(0,i.jsxs)(s.p,{children:["With Jest 26 we are shipping a new implementation of fake timers based on ",(0,i.jsx)(s.code,{children:"@sinonjs/fake-timers"}),". We've wanted to do this for years and are happy this has finally progressed far enough to support all of Jest's existing fake timer use cases."]}),"\n",(0,i.jsxs)(s.p,{children:["The new implementation comes with extra features such as mocking ",(0,i.jsx)(s.code,{children:"Date"}),", ",(0,i.jsx)(s.code,{children:"queueMicrotask"})," and more, see ",(0,i.jsx)(s.a,{href:"https://github.com/sinonjs/fake-timers/blob/master/README.md",children:"this README"}),". It works transparently using the existing timer APIs like ",(0,i.jsx)(s.code,{children:"jest.runAllTimers()"})," \u2013 check out the documentation ",(0,i.jsx)(s.a,{href:"/docs/timer-mocks",children:"on our website"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:["We are confident this implementation is ready for prime time, however we don't want to force people to rewrite their tests if they depend on subtle differences between the old and new implementation. In Jest 26, this new implementation will remain ",(0,i.jsx)(s.em,{children:"opt-in"})," and can be activated by calling ",(0,i.jsx)(s.code,{children:"jest.useFakeTimers('modern')"})," or by passing ",(0,i.jsx)(s.code,{children:"modern"})," to the ",(0,i.jsx)(s.code,{children:"timers"})," option in your config if you opted all tests into fake timers previously."]}),"\n",(0,i.jsxs)(s.p,{children:['In Jest 27 we will swap the default to the new "modern" implementation but we will keep supporting and maintaining the legacy implementation which can be used by calling ',(0,i.jsx)(s.code,{children:"jest.useFakeTimers('legacy')"}),". If you are unsure whether you'll be able to upgrade all your tests by the time Jest 27 rolls out, you can add this to your tests now to keep the old behavior."]}),"\n",(0,i.jsxs)(s.p,{children:["We'd like to thank ",(0,i.jsx)(s.a,{href:"https://github.com/fatso83",children:"Carl-Erik Kopseng"}),", ",(0,i.jsx)(s.a,{href:"https://github.com/benjamingr",children:"Benjamin Gruenbaum"})," and other maintainers of ",(0,i.jsx)(s.code,{children:"@sinonjs/fake-timers"})," for their help and patience when working with us to make this happen! ",(0,i.jsx)(s.em,{children:"Exciting"}),"."]}),"\n",(0,i.jsxs)(s.h2,{id:"a-new-way-to-consume-jest---jestglobals",children:["A new way to consume Jest - ",(0,i.jsx)(s.code,{children:"@jest/globals"})]}),"\n",(0,i.jsxs)(s.p,{children:["Jest has relied on globals popularized by the Jasmine testing framework and others such as ",(0,i.jsx)(s.code,{children:"describe"}),", ",(0,i.jsx)(s.code,{children:"it"}),", ",(0,i.jsx)(s.code,{children:"test"})," and ",(0,i.jsx)(s.code,{children:"expect"}),". While this is a widely used pattern, many people have expressed their preference for importing testing related functions instead. To support this use case, we added a new package ",(0,i.jsx)(s.code,{children:"@jest/globals"})," that can be used to import testing functions: ",(0,i.jsx)(s.code,{children:"import {expect, jest, test} from '@jest/globals';"}),"."]}),"\n",(0,i.jsx)(s.p,{children:"Caveats:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Currently the globals still exist in the environment but we will introduce a mode to disable globals in the future. Similarly, you cannot use ",(0,i.jsx)(s.code,{children:"const jest = require('@jest/globals')"})," as you'll get declaration errors because the ",(0,i.jsx)(s.code,{children:"jest"})," variable is still a global for now."]}),"\n",(0,i.jsx)(s.li,{children:"There is currently no way to add custom matchers to the TypeScript definitions when using globals like this."}),"\n",(0,i.jsx)(s.li,{children:"While this allows running tests without globals, it does not allow running tests without Jest's test runner at this time."}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"native-esm-support",children:"Native ESM support"}),"\n",(0,i.jsxs)(s.p,{children:["As mentioned in the ",(0,i.jsx)(s.a,{href:"/blog/2020/01/21/jest-25#ecmascript-modules-support",children:"Jest 25 blog post"})," we have been working on native support for ECMAScript Modules. It is not stable yet but it is ready to be tested. We'd love to hear your feedback and bug reports! For an overview of the current state you can check out ",(0,i.jsx)(s.a,{href:"https://github.com/jestjs/jest/issues/9430",children:"this issue"}),", or browse all issues with that label ",(0,i.jsx)(s.a,{href:"https://github.com/jestjs/jest/labels/ES%20Modules",children:"ES Modules"}),"."]}),"\n",(0,i.jsx)(s.h2,{id:"other-breaking-changes-in-jest-26",children:"Other Breaking Changes in Jest 26"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Dropped support for Node 8 (",(0,i.jsx)(s.a,{href:"https://github.com/jestjs/jest/pull/9423",children:"#9423"}),")"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"[jest-environment-jsdom]"})," Upgrade ",(0,i.jsx)(s.code,{children:"jsdom"})," to v16 (",(0,i.jsx)(s.a,{href:"https://github.com/jestjs/jest/pull/9606",children:"#9606"}),")"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"[jest-runtime]"})," Remove long-deprecated ",(0,i.jsx)(s.code,{children:"require.requireActual"})," and ",(0,i.jsx)(s.code,{children:"require.requireMock"})," methods (",(0,i.jsx)(s.a,{href:"https://github.com/jestjs/jest/pull/9854",children:"#9854"}),")"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"[jest-haste-map]"})," Removed ",(0,i.jsx)(s.code,{children:"providesModuleNodeModules"})," (",(0,i.jsx)(s.a,{href:"https://github.com/jestjs/jest/pull/8535",children:"#8535"}),")"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"[jest-circus]"})," Fail tests if a test takes a done callback and have return values (",(0,i.jsx)(s.a,{href:"https://github.com/jestjs/jest/pull/9129",children:"#9129"}),")"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"[jest-circus]"})," Throw a proper error if a test / hooks is defined asynchronously (",(0,i.jsx)(s.a,{href:"https://github.com/jestjs/jest/pull/8096",children:"#8096"}),")"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"stay-safe",children:"Stay Safe"}),"\n",(0,i.jsxs)(s.p,{children:["We are all currently experiencing an unprecedented time of uncertainty. If you are struggling financially, we would like to use ",(0,i.jsx)(s.a,{href:"https://opencollective.com/jest",children:"Jest\u2019s Open Collective fund"})," to help new and existing contributors. We place ",(0,i.jsx)(s.a,{href:"https://github.com/jestjs/jest/issues?q=is%3Aissue+is%3Aopen+bounty+label%3A%22Has+Bounty%22",children:"bounties on some issues"})," and are open to offering a bounty on any of our current open issues - you can mention that an issue should have a bounty in the issue or contact ",(0,i.jsx)(s.a,{href:"https://twitter.com/cpojer",children:"@cpojer via private message on Twitter"}),"."]}),"\n",(0,i.jsx)(s.p,{children:"Please stay safe."})]})}function h(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},3023:(e,s,t)=>{t.d(s,{R:()=>r,x:()=>a});var n=t(3696);const i={},o=n.createContext(i);function r(e){const s=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(o.Provider,{value:s},e.children)}},5137:e=>{e.exports=JSON.parse('{"permalink":"/fr/blog/2020/05/05/jest-26","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2020-05-05-jest-26.md","source":"@site/blog/2020-05-05-jest-26.md","title":"Jest 26: Tick Tock","description":"When we started rebuilding Jest five years ago our goal was to provide a batteries-included zero-configuration test runner that is approachable for beginners, extensible for almost all testing use cases and scalable to large projects. One of the instrumental releases was Jest 15 which tied everything together and provided good defaults that allowed people to run Jest often without any setup. However, this approach has a big downside as Jest installs a lot of dependencies into your projects that you may not need.","date":"2020-05-05T00:00:00.000Z","tags":[],"readingTime":6.125,"hasTruncateMarker":true,"authors":[{"name":"Christoph Nakazawa","url":"https://github.com/cpojer","socials":{"github":"https://github.com/cpojer","x":"https://x.com/cpojer"},"imageURL":"https://github.com/cpojer.png","key":"cpojer","page":null}],"frontMatter":{"title":"Jest 26: Tick Tock","authors":"cpojer"},"unlisted":false,"prevItem":{"title":"Jest Website Upgrade","permalink":"/fr/blog/2021/03/09/jest-website-upgrade"},"nextItem":{"title":"Jest 25: \ud83d\ude80 Laying foundations for the future","permalink":"/fr/blog/2020/01/21/jest-25"}}')}}]);